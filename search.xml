<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Code Sharing</title>
      <link href="/sharing/code-sharing/"/>
      <url>/sharing/code-sharing/</url>
      
        <content type="html"><![CDATA[<p>This is a post with interesting and useful code that will help programming. Most of them are from the internet, and credits are in the comments of the code.</p><h2 id="C-Execute-a-Program-In-Memory"><a href="#C-Execute-a-Program-In-Memory" class="headerlink" title="C# Execute a Program In Memory"></a>C# Execute a Program In Memory</h2><p>With <code>unsafe</code>, C# can do bunch of wierd things. Useful in games or secret programs.</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span><span class="token comment">/* * Title: CMemoryExecute.cs * Description: Runs an EXE in memory using native WinAPI. Very optimized and tiny. * * Developed by: affixiate * Release date: December 3, 2010 * Released on: http://hackforums.net * Credits: *    MSDN (http://msdn.microsoft.com) *    NtInternals (http://undocumented.ntinternals.net) *    Pinvoke (http://pinvoke.net) * * Comments: If you use this code, I require you to give me credits. Don't be a ripper! ;] */</span><span class="token comment">// ReSharper disable InconsistentNaming</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">unsafe</span> <span class="token keyword">class</span> <span class="token class-name">CMemoryExecute</span><span class="token punctuation">&#123;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// Runs an EXE (which is loaded in a byte array) in memory.</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token comment">/// &lt;param name="exeBuffer">The EXE buffer.&lt;/param></span>    <span class="token comment">/// &lt;param name="hostProcess">Full path of the host process to run the buffer in.&lt;/param></span>    <span class="token comment">/// &lt;param name="optionalArguments">Optional command line arguments.&lt;/param></span>    <span class="token comment">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> exeBuffer<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> hostProcess<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> optionalArguments <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token class-name"><span class="token keyword">var</span></span> IMAGE_SECTION_HEADER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">0x28</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// pish</span>      <span class="token class-name"><span class="token keyword">var</span></span> IMAGE_NT_HEADERS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">0xf8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// pinh</span>      <span class="token class-name"><span class="token keyword">var</span></span> IMAGE_DOS_HEADER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">0x40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// pidh</span>      <span class="token class-name"><span class="token keyword">var</span></span> PROCESS_INFO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">0x4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// pi</span>      <span class="token class-name"><span class="token keyword">var</span></span> CONTEXT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">0x2cc</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// ctx</span>      <span class="token keyword">byte</span><span class="token operator">*</span> pish<span class="token punctuation">;</span>      <span class="token keyword">fixed</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>IMAGE_SECTION_HEADER<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        pish <span class="token operator">=</span> p<span class="token punctuation">;</span>      <span class="token keyword">byte</span><span class="token operator">*</span> pinh<span class="token punctuation">;</span>      <span class="token keyword">fixed</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>IMAGE_NT_HEADERS<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        pinh <span class="token operator">=</span> p<span class="token punctuation">;</span>      <span class="token keyword">byte</span><span class="token operator">*</span> pidh<span class="token punctuation">;</span>      <span class="token keyword">fixed</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>IMAGE_DOS_HEADER<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        pidh <span class="token operator">=</span> p<span class="token punctuation">;</span>      <span class="token keyword">byte</span><span class="token operator">*</span> ctx<span class="token punctuation">;</span>      <span class="token keyword">fixed</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>CONTEXT<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ctx <span class="token operator">=</span> p<span class="token punctuation">;</span>      <span class="token comment">// Set the flag.</span>      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ctx <span class="token operator">+</span> <span class="token number">0x0</span> <span class="token comment">/* ContextFlags */</span><span class="token punctuation">)</span> <span class="token operator">=</span> CONTEXT_FULL<span class="token punctuation">;</span>      <span class="token comment">// Get the DOS header of the EXE.</span>      Buffer<span class="token punctuation">.</span><span class="token function">BlockCopy</span><span class="token punctuation">(</span>exeBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> IMAGE_DOS_HEADER<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> IMAGE_DOS_HEADER<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/* Sanity check:  See if we have MZ header. */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">ushort</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pidh <span class="token operator">+</span> <span class="token number">0x0</span> <span class="token comment">/* e_magic */</span><span class="token punctuation">)</span> <span class="token operator">!=</span> IMAGE_DOS_SIGNATURE<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token class-name"><span class="token keyword">var</span></span> e_lfanew <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pidh <span class="token operator">+</span> <span class="token number">0x3c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Get the NT header of the EXE.</span>      Buffer<span class="token punctuation">.</span><span class="token function">BlockCopy</span><span class="token punctuation">(</span>exeBuffer<span class="token punctuation">,</span> e_lfanew<span class="token punctuation">,</span> IMAGE_NT_HEADERS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> IMAGE_NT_HEADERS<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/* Sanity check: See if we have PE00 header. */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pinh <span class="token operator">+</span> <span class="token number">0x0</span> <span class="token comment">/* Signature */</span><span class="token punctuation">)</span> <span class="token operator">!=</span> IMAGE_NT_SIGNATURE<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token comment">// Run with parameters if necessary.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>optionalArguments<span class="token punctuation">)</span><span class="token punctuation">)</span>        hostProcess <span class="token operator">+=</span> <span class="token string">" "</span> <span class="token operator">+</span> optionalArguments<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">CreateProcess</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> hostProcess<span class="token punctuation">,</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">,</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> CREATE_SUSPENDED<span class="token punctuation">,</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">0x44</span><span class="token punctuation">]</span><span class="token punctuation">,</span> PROCESS_INFO<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token class-name"><span class="token keyword">var</span></span> ImageBase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IntPtr</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>pinh <span class="token operator">+</span> <span class="token number">0x34</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">NtUnmapViewOfSection</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span>PROCESS_INFO<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">/* pi.hProcess */</span><span class="token punctuation">,</span> ImageBase<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">VirtualAllocEx</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span>PROCESS_INFO<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">/* pi.hProcess */</span><span class="token punctuation">,</span> ImageBase<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pinh <span class="token operator">+</span> <span class="token number">0x50</span> <span class="token comment">/* SizeOfImage */</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MEM_COMMIT <span class="token operator">|</span> MEM_RESERVE<span class="token punctuation">,</span> PAGE_EXECUTE_READWRITE<span class="token punctuation">)</span> <span class="token operator">==</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">)</span>        <span class="token function">Run</span><span class="token punctuation">(</span>exeBuffer<span class="token punctuation">,</span> hostProcess<span class="token punctuation">,</span> optionalArguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Memory allocation failed; try again (this can happen in low memory situations)</span>      <span class="token keyword">fixed</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>exeBuffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">NtWriteVirtualMemory</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span>PROCESS_INFO<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">/* pi.hProcess */</span><span class="token punctuation">,</span> ImageBase<span class="token punctuation">,</span> <span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span>p<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pinh <span class="token operator">+</span> <span class="token number">84</span> <span class="token comment">/* SizeOfHeaders */</span><span class="token punctuation">)</span><span class="token punctuation">,</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">ushort</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">ushort</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pinh <span class="token operator">+</span> <span class="token number">0x6</span> <span class="token comment">/* NumberOfSections */</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        Buffer<span class="token punctuation">.</span><span class="token function">BlockCopy</span><span class="token punctuation">(</span>exeBuffer<span class="token punctuation">,</span> e_lfanew <span class="token operator">+</span> IMAGE_NT_HEADERS<span class="token punctuation">.</span>Length <span class="token operator">+</span> <span class="token punctuation">(</span>IMAGE_SECTION_HEADER<span class="token punctuation">.</span>Length <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> IMAGE_SECTION_HEADER<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> IMAGE_SECTION_HEADER<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">fixed</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>exeBuffer<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pish <span class="token operator">+</span> <span class="token number">0x14</span> <span class="token comment">/* PointerToRawData */</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">NtWriteVirtualMemory</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span>PROCESS_INFO<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">/* pi.hProcess */</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ImageBase <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pish <span class="token operator">+</span> <span class="token number">0xc</span> <span class="token comment">/* VirtualAddress */</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span>p<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pish <span class="token operator">+</span> <span class="token number">0x10</span> <span class="token comment">/* SizeOfRawData */</span><span class="token punctuation">)</span><span class="token punctuation">,</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">NtGetContextThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span>PROCESS_INFO<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">/* pi.hThread */</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">NtWriteVirtualMemory</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span>PROCESS_INFO<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">/* pi.hProcess */</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span><span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ctx <span class="token operator">+</span> <span class="token number">0xAC</span> <span class="token comment">/* ecx */</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ImageBase<span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ctx <span class="token operator">+</span> <span class="token number">0xB0</span> <span class="token comment">/* eax */</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token punctuation">)</span>ImageBase <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">uint</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>pinh <span class="token operator">+</span> <span class="token number">0x28</span> <span class="token comment">/* AddressOfEntryPoint */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">NtSetContextThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span>PROCESS_INFO<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">/* pi.hThread */</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">NtResumeThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IntPtr<span class="token punctuation">)</span>PROCESS_INFO<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">/* pi.hThread */</span><span class="token punctuation">,</span> IntPtr<span class="token punctuation">.</span>Zero<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> WinNT Definitions</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">uint</span></span> CONTEXT_FULL <span class="token operator">=</span> <span class="token number">0x10007</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> CREATE_SUSPENDED <span class="token operator">=</span> <span class="token number">0x4</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> MEM_COMMIT <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> MEM_RESERVE <span class="token operator">=</span> <span class="token number">0x2000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> PAGE_EXECUTE_READWRITE <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">ushort</span></span> IMAGE_DOS_SIGNATURE <span class="token operator">=</span> <span class="token number">0x5A4D</span><span class="token punctuation">;</span> <span class="token comment">// MZ</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">uint</span></span> IMAGE_NT_SIGNATURE <span class="token operator">=</span> <span class="token number">0x00004550</span><span class="token punctuation">;</span> <span class="token comment">// PE00</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> WinAPI</span>    <span class="token punctuation">[</span><span class="token function">DllImport</span><span class="token punctuation">(</span><span class="token string">"kernel32.dll"</span><span class="token punctuation">,</span> SetLastError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">CreateProcess</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> lpApplicationName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> lpCommandLine<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> lpProcessAttributes<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> lpThreadAttributes<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> bInheritHandles<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwCreationFlags<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> lpEnvironment<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> lpCurrentDirectory<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> lpStartupInfo<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> lpProcessInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"kernel32.dll"</span><span class="token punctuation">,</span> SetLastError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name">IntPtr</span> <span class="token function">VirtualAllocEx</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hProcess<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> lpAddress<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">uint</span></span> dwSize<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">uint</span></span> flAllocationType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">uint</span></span> flProtect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"ntdll.dll"</span><span class="token punctuation">,</span> SetLastError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">uint</span></span> <span class="token function">NtUnmapViewOfSection</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hProcess<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> lpBaseAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"ntdll.dll"</span><span class="token punctuation">,</span> SetLastError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">NtWriteVirtualMemory</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hProcess<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> lpBaseAddress<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> lpBuffer<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">uint</span></span> nSize<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> lpNumberOfBytesWritten<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"ntdll.dll"</span><span class="token punctuation">,</span> SetLastError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">NtGetContextThread</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hThread<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> lpContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"ntdll.dll"</span><span class="token punctuation">,</span> SetLastError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">NtSetContextThread</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hThread<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> lpContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"ntdll.dll"</span><span class="token punctuation">,</span> SetLastError <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">uint</span></span> <span class="token function">NtResumeThread</span><span class="token punctuation">(</span><span class="token class-name">IntPtr</span> hThread<span class="token punctuation">,</span> <span class="token class-name">IntPtr</span> SuspendCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python-Remove-C-Style-Comments"><a href="#Python-Remove-C-Style-Comments" class="headerlink" title="Python Remove C-Style Comments"></a>Python Remove C-Style Comments</h2><p>Removing C/C++ style comments in Python.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">comment_remover</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Credits:    https://stackoverflow.com/a/241506    """</span>    <span class="token keyword">def</span> <span class="token function">replacer</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> s<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">" "</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> s    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>        <span class="token string">r'//.*?$|/\*.*?\*/|\'(?:\\.|[^\\\'])*\'|"(?:\\.|[^\\"])*"'</span><span class="token punctuation">,</span>        re<span class="token punctuation">.</span>DOTALL <span class="token operator">|</span> re<span class="token punctuation">.</span>MULTILINE    <span class="token punctuation">)</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> replacer<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Sharing </category>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Useful stuffs </tag>
            
            <tag> Sharing </tag>
            
            <tag> Coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Websites Sharing</title>
      <link href="/sharing/websites-sharing/"/>
      <url>/sharing/websites-sharing/</url>
      
        <content type="html"><![CDATA[<h2 id="ML-and-AI-and-DL"><a href="#ML-and-AI-and-DL" class="headerlink" title="ML and AI and DL"></a>ML and AI and DL</h2><ul><li><a href="https://d2l.ai/">Dive into Deep Learning</a> (Berkeley textbook for DL)</li><li><a href="https://www.pommerman.com/">Pommerman</a></li><li><a href="https://davidrosenberg.github.io/ml2019">David Rosenberg ML 2019</a></li></ul><h2 id="Datasets"><a href="#Datasets" class="headerlink" title="Datasets"></a>Datasets</h2><ul><li><a href="http://www.eng.usf.edu/cvprg/Mammography/Database.html">University of South Florida Digital Mammography</a></li><li><a href="https://www.data.gov/">US government open data</a></li><li><a href="https://opendata.cityofnewyork.us/">New York City open data</a></li><li><a href="https://www.kaggle.com/">Kaggle</a></li></ul><h2 id="Probability-and-Statistics"><a href="#Probability-and-Statistics" class="headerlink" title="Probability and Statistics"></a>Probability and Statistics</h2><ul><li><a href="https://see.stanford.edu/materials/aimlcs229/cs229-gp.pdf">高斯过程简述（Gaussian Processes）</a></li><li><a href="http://www.gaussianprocess.org/">高斯过程（Gaussian Process）</a></li></ul><h2 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h2><ul><li><a href="https://medium.com/@Clovis_app/configuration-of-a-beautiful-efficient-terminal-and-prompt-on-osx-in-7-minutes-827c29391961">Great zsh config</a></li></ul><h2 id="Funs"><a href="#Funs" class="headerlink" title="Funs"></a>Funs</h2><ul><li><a href="http://ai.binwang.me/couplet">自动对对联系统</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Sharing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Useful stuffs </tag>
            
            <tag> Sharing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Programming Language</title>
      <link href="/programming/pl/preface/"/>
      <url>/programming/pl/preface/</url>
      
        <content type="html"><![CDATA[<div align="center" style="font-size: 33px">    Programming Language</div><div align="center" style="font-size: 20px">Concepts and Implementations<br><img src="https://img.shields.io/badge/Rebuild-714026292-orange" / loading="lazy"></div><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>I have to thank my professor, <a href="http://ezyang.com/">Edward Yang</a> who introduced me to the area of Programming Language, a lot. This is a complicated field in CS that gives you another view out of the current structure of the commonly-used object oriented structures. It turns out that now more and more new features in most programming languages are accomodating <strong>functional programming</strong> in them. I can’t say exactly that it’s useful, but it will definitely provide you another way to look at problems and, of course, new ways of problem solving.</p><p>When you design a programming language, what should you focus on? Syntax? Convenience? Well if you want a word, that is <strong>concept</strong><sup><a href="#Reference">1</a></sup>. From my perspective, concepts are heavily mathematical. However, to select detailed concepts from these abstract mathematical concepts and implement them is hard, and it’s the core of programming languages. </p><p>Ideas in this introduction will be simple but may take long enough to absorb. I want to go on with the following concepts. </p><blockquote><p>First class functions, pattern matching, types, monads, continuations, laziness.</p></blockquote><p>Maybe more, but we’ll see. The languages I will use are <a href="https://www.haskell.org/">Haskell</a> and Javascript. If you haven’t installed them yet, and if you want to try by yourself, please install them. Haskell can be installed through <a href="https://www.haskell.org/platform">Haskell Platform</a> and for JS we are using <a href="https://nodejs.org/">Node</a>. Also, I have to assume that you have some knowledge on Javascript because I am not going to teach the language itself. Let’s begin.</p><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><ul><li><a href="/programming/pl/1-javascript"><strong>1 Javascript</strong></a></li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><blockquote><p>A good programming language is a conceptual universe for thinking about programming.<br>– Alan Perlis</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> PL </tag>
            
            <tag> Haskell </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Programming Language Chapter 1</title>
      <link href="/programming/pl/1-javascript/"/>
      <url>/programming/pl/1-javascript/</url>
      
        <content type="html"><![CDATA[<div align="center" style="font-size: 33px"><b>    Chapter 1: Javascript    <div style="font-size: 15px">and First Class Functions</div></b></div><h2 id="History-of-Javascript"><a href="#History-of-Javascript" class="headerlink" title="History of Javascript"></a>History of Javascript</h2><p>Javascript originally targets explicitly for browsers. Netscape, a browser that is extremely popular in the 90s, asked Brendan Eich to design an “HTML scripting language” that had to look like Java on the basis of Scheme, another language at that time. Well, brilliant Eich finished the language in <strong>10 days</strong> and they later called it Javascript, JS for short. Since they didn’t change anything and directly embedded the made-in-10-day language into their browser, it so happens that some designs of Javascript are considered poor, even though people tried to fix them later. An example is the mind-blowing type conversion. That’s why Microsoft later developed Typescript in top of Javascript to restrict the types. </p><h2 id="Components-in-Javascript"><a href="#Components-in-Javascript" class="headerlink" title="Components in Javascript"></a>Components in Javascript</h2><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><p>Let’s look at the definition of functions in Javascript.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Functions in Javascript are <strong>first class</strong>, meaning that they can be used <strong>just like a variable</strong>. The above example is an anonymous function that has no use. A newer way to write this is using <strong>lambda expressions</strong> <code>(x) =&gt; x + 1</code>, but they have some differences. Now, let’s give it a name.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> <span class="token function-variable function">f2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Both ways are fine, and they can be used as variables. That’s why they are <strong>first class functions</strong>. Let’s write another function and make use of these variables.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">f</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">// -> 3</span><span class="token function">f</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">// -> 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>I said before that the type conversion is bad in JS. Here is how. Just guess what is <code>f1(&quot;5&quot;)</code>. Yes, it’s <code>&quot;51&quot;</code>. This may be OK, but here comes the strange thing. Try <code>f1([])</code>. It will be <code>&quot;1&quot;</code>. <code>f([1, 2])</code> will be <code>&quot;1,21&quot;</code>. This is because oprands on both sides will be converted to <code>string</code> if the interpretor doesn’t know how to evaluate the operation. This will bring wierd bugs sometimes, and you can read more in <a href="https://github.com/denysdovhan/wtfjs">wtfjs</a>.</p></blockquote><p>Here, <code>apply</code> is called a <strong>higher order function</strong>. This kind of functions either takes a function as an argument, or returns a function.</p><h3 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h3><p>Another important concept in Javascript is <strong>closure</strong>. A function definition “captures” variables in its context, which can be used if the function is called later.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// > 1</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// > 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This is an important concept because we will be using it all the time later when we talk about currying and continuations. Also, here, <code>counter</code> is a higher order function. Let’s just look at a more complicated example. We will <strong>never</strong> have to understand it, just look at how functions can be and laziness play a role in that!</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token parameter">g</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> fact <span class="token operator">=</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fact</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> n <span class="token operator">:</span> n <span class="token operator">*</span> <span class="token function">fact</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fact</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment">// -> 120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><p>Objects are basically hashmaps or dictionaries in Javascript. However, to make the language Object Oriented, objects without <strong>prototypes</strong> are not enough. Let’s look firstly at objects without prototypes.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token function-variable function">f</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// -> 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Here, you can see the structure of this object. You can access the members by <code>.</code> <strong>or</strong> <code>[...]</code>. Actually, objects and arrays in Javascript are the same except that when accessing using index notation <code>[key]</code>, <code>key</code> for objects must be (or will be converted to) string, and <code>key</code> for arrays must be (or will be converted to) Number. Members can be added or modified using dot or index notation, and can be deleted by <code>delete</code> keyword followed by the member you want to delete, e.g. <code>delete obj.f</code>.</p><p>Further, <code>this</code> is a pointer pointing to the object that <strong>owns</strong> the function as a <strong>method</strong>. In python, it’s even more clear:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>xA<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># -> 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Here, <code>self</code> explicitly goes into the arguments and when the method is called, the object pointer is passed in <strong>implicitly</strong>. </p><p>Now, let’s look at the Javascript way of defining a class like Python above. </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// -> 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Like Python, the complexity of ojbects in Javascript comes from the concept of <strong>prototypes</strong> of objects. However, since our focus is not on objects for now, let’s skip this part. Our focus is on “functions,” and from this point we are going to think in a <strong>functional</strong> way.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://en.wikipedia.org/wiki/JavaScript#Creation_at_Netscape">https://en.wikipedia.org/wiki/JavaScript#Creation_at_Netscape</a></li></ol><hr><h6 align="right"><a href="#">Next</a> | <a href="/programming/pl/preface">Home</a></h6>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> PL </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GNU/Linux Introduction Chapter 3</title>
      <link href="/programming/linux/tutorial/3-io/"/>
      <url>/programming/linux/tutorial/3-io/</url>
      
        <content type="html"><![CDATA[<div align="center" style="font-size: 33px"><b>    Chapter 3: I/O</b></div><h2 id="Standard-I-O"><a href="#Standard-I-O" class="headerlink" title="Standard I/O"></a>Standard I/O</h2><p>Maybe you have heard of standard in or out (<code>stdin</code> or <code>stdout</code>) before. If you use Java, you must be familiar with two streams: <code>System.in</code> and <code>System.out</code>. They are I/O streams onto the terminal, or <code>tty</code>. I don’t want to confuse you as well as myself, so for now let’s just say the standard I/O prints and gets text to and from the console screen.</p><h3 id="File-Descriptors"><a href="#File-Descriptors" class="headerlink" title="File Descriptors"></a>File Descriptors</h3><p>When it comes to I/O, you might first think of files. In Linux, files are accessed by <strong>file descriptors</strong>. The file descriptors are integers given by the kernel when you want to access (say, read or write) a file. The descriptor allows you to have access to the file as well as its information or metadata. For example, in C, if you want to open and read from a file <strong>with system calls</strong> (instead of using standard libraries that makes the call and wrap around for you), you will use the function <code>int open(const char *pathname, int flags)</code> and <code>ssize_t read(int fd, void *buf, size_t count)</code>. For more you can read <code>man 2 open</code> and <code>man 2 read</code>. An example program will be</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span>      <span class="token comment">// file control flags</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/home/rebuild/a.txt"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">ssize_t</span> bytes_read<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytes_read <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now, I will introduce 3 special file descriptors: 0, 1, and 2. They are reserved and will always exist. They represent <code>stdin</code>, <code>stdout</code>, and <code>stderr</code>, respectively. File descriptor 0 is read only, and file descriptors 1 and 2 are write only. You can easily use them since you don’t need to manually open them. Just use them as simple as</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STDOUT</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token comment">// ...</span><span class="token function">write</span><span class="token punctuation">(</span>STDOUT<span class="token punctuation">,</span> <span class="token string">"hello, world!"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In Linux, standard I/O have another appearance as device files so that standard I/O can also be interpreted as file I/O. Go to <code>/dev/fd</code> using <code>cd</code>. If you list files using <code>ls -la</code>, there must be 3 entries as follows.</p><pre class="line-numbers language-none"><code class="language-none">lrwx------ 1 root root 64 Oct 29 14:18 0 -&gt; &#x2F;dev&#x2F;pts&#x2F;0lrwx------ 1 root root 64 Oct 29 14:18 1 -&gt; &#x2F;dev&#x2F;pts&#x2F;0lrwx------ 1 root root 64 Oct 29 14:18 2 -&gt; &#x2F;dev&#x2F;pts&#x2F;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>They actually all point to <code>dev/pts/0</code>, which stands for the <strong>p</strong>seudo <strong>t</strong>erminal<strong>s</strong> (pty for short). This is the number 0 of the ptys. There may be many ptys under this folder, and you can use <code>tty</code> command to check which pty are you using for your own shell. It’s just a readable and writable device file representing the terminal. We will talk more on this when we use redirection in the next chapter.</p><p>With this knowledge in mind, let’s learn some I/O in shell.</p><h2 id="I-O-in-Shells"><a href="#I-O-in-Shells" class="headerlink" title="I/O in Shells"></a>I/O in Shells</h2><blockquote><p>For anything related to shell starting from this point, I will use Bash as an example. Check your shell using <code>echo $SHELL</code>. If it’s not <code>/bin/bash</code>, please type <code>/bin/bash</code> to switch to Bash.</p></blockquote><h3 id="Redirecting-Output"><a href="#Redirecting-Output" class="headerlink" title="Redirecting Output"></a>Redirecting Output</h3><p>Now we know that I/O includes all of files and standard streams (and also devices). Now, let’s manipulate I/O in shells and forget about programs for now.</p><p>I have never told you how to write to a file before. Let’s suppose for now that we don’t have text editors, not even <code>vim</code>, <code>emacs</code>, <code>nano</code>, or <code>ed</code>. How to write to a file? Well, we have to use <strong>output redirection</strong>. The operator for this operation in shells is <code>&gt;</code>. For example, if we want to write <code>Hello, world</code> to a file <code>a.txt</code>, we can simply use <code>echo -n &quot;Hello, world&quot; &gt; a.txt</code>. The <code>-n</code> option means that no additional new line character <code>\n</code> will be printed. Here, <code>echo</code> will print whatever you wrote to <code>stdout</code>, and <code>&gt;</code> will <strong>redirect</strong> <code>stdout</code> to whatever follows, <code>a.txt</code> in this example. </p><p>Let’s do one more useful example. Say a program will print huge amounts of useless information to the screen and you don’t want to see them. <code>head -n 10 /dev/urandom</code> will be great example. The <code>head</code> command by default reads the first 10 lines from a file (to peek the head of a file). You can specify the number of lines to read by using the <code>-n &lt;number&gt;</code> option. <code>/dev/urandom</code> is a special file (called a character special <strong>device</strong>) that will give out random bytes when read from. 10 lines from random byte stream will be a lot. Just pretend that this is a program you want to execute. How to make the output disappear? Here, we need another special device file called <code>/dev/null</code>. From its name we can know clearly that it represents a black hole. Everything written to this file will go away. Therefore, we have the solution: <code>head -n 10 /dev/urandom &gt; /dev/null</code>. </p><p>Now let’s see some advanced usage of redirection. We learned the 3 special file descriptors previously. Let’s use them here. First, we can specify which stream to redirect to. <code>1&gt;</code> will redirect <code>stdout(1)</code>, and <code>2&gt;</code> will redirect <code>stderr(2)</code>. The previous <code>&gt;</code> is just shorthand for <code>1&gt;</code>. Let’s choose a program that will print to both <code>stdout</code> and <code>stderr</code>. Most error messages will go to <code>stderr</code>. Let’s use <code>ls</code>. If you <code>ls</code> a file that doesn’t exist, it will report error. First, choose a file that exists in your current directory and a name that doesn’t exist in your directory. For me, I have <code>a.txt</code> in my directory, but no <code>b.txt</code>. Then, if I execute <code>ls a.txt b.txt</code>, it will print</p><pre class="line-numbers language-none"><code class="language-none">ls: cannot access &#39;b.txt&#39;: No such file or directorya.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The first line is from <code>stderr</code>, and the second line is from <code>stdout</code>. Let’s try to hide <code>stderr</code> using knowledge we have. Yes, <code>ls a.txt b.txt 2&gt;/dev/null</code> is correct. It will then only output <code>a.txt</code>. Similarly, <code>ls a.txt b.txt 1&gt;/dev/null</code> will only output <code>ls: cannot access &#39;b.txt&#39;: No such file or directory</code> to <code>stderr</code>. Now here comes the question. If a program only accepts <code>stdout</code>, how do I redirect <code>stderr</code> to <code>stdout</code>? The first option is using the knowledge we have. Remember <code>/dev/fd/1</code>? It’s a file! We can use <code>2&gt;/dev/fd/1</code>! Run <code>bash -c &quot;ls LICENSE a.txt 2&gt;/dev/fd/1&quot; &gt; /dev/null</code> to check that no output is generated. If you only run <code>bash -c &quot;ls LICENSE a.txt&quot; &gt; /dev/null</code>, you will also get the error message. However using this name is too long for file descriptors. Therefore, if you want to access a file descriptor for redirection, you can use the shorthand <code>&amp;&lt;fd&gt;</code>. In previous example, we can just write <code>bash -c &quot;ls LICENSE a.txt 2&gt;&amp;1&quot; &gt; /dev/null</code>, and <code>2&gt;&amp;1</code> is always the best way to redirect <code>stderr</code> to <code>stdout</code>. </p><h3 id="Pipes"><a href="#Pipes" class="headerlink" title="Pipes"></a>Pipes</h3><p>First of all, most GNU utility programs which accept files as inputs accept standard input. Let’s take <code>cat</code> as an example. The command <code>cat</code> is for printing contents of a file. It can print also the standard input. If you just type <code>cat</code> into the terminal and then you type something and hit <kbd>↵ Enter</kbd> (Windows) or <kbd>↵ Return</kbd> (Mac), you will see the exact same thing you typed in the output! But how is this even useful? Well, maybe not for <code>cat</code>, but for many other programs. </p><p>Let’s check again the <code>head</code> program. Suppose you have a file <code>numbers.txt</code>, which consists of the numbers 1 to 10, each on a line. If you execute <code>head -n 5 numbers.txt</code>, you will get 1 to 5 as expected. Also, if you run <code>head -n 5</code> alone, and you input 5 lines, they will be printed out. Now, let’s say you have a command that will output a lot of information. Let’s use <code>ip</code> for an example. <code>ip a</code> will show you all the network configurations for your computer. However, sometimes the output is very long. What if I only want the first result? Yes! Let’s use <code>head</code>! But wait… How to read the output from another program into the input of <code>head</code>? The answer is <strong>pipe</strong>! The format of pipes is <code>&lt;command1&gt; | &lt;command2&gt; | ... | &lt;commandN&gt;</code>. </p><p>Continue with the last example. We will use <code>ip a | head</code> to show the information of the first 10 lines. Next, I will introduce you a super useful command: <code>grep</code>. I plan to introduce this command gradually throughout this course, but here I will tell you the basic usage of it. Basically, it will show lines that contains a given regular expression. You can grep a file using <code>grep &lt;regex&gt; &lt;file&gt;...</code>, and here we want to use it to find lines within output of another command. Let’s check the model name of our CPU cores! The information about CPUs are stored in the file <code>/proc/cpuinfo</code>. If we only use grep, we can use <code>grep &quot;model name&quot; /proc/cpuinfo</code>. Then, let’s get the content of the file using <code>cat</code> and pretend that it’s not reading from a file, which is something <code>grep</code> can do. We can use <code>cat /proc/cpuinfo | grep &quot;model name&quot;</code>. More useful scenario is when we want to check the processes running in background. We have to use <code>ps</code> command standing for <strong>p</strong>roce<strong>s</strong>s. We can see <strong>all</strong> processes running by <code>ps -ef</code>. Let’s check if there is any <code>python</code> running. The command is <code>ps -ef | grep python</code>. If nothing show up, then no python is run on your computer. You can then check for other processes. </p><p>The last thing I want to tell you in this chapter is an interesting one-liner<sup><a href="#Notes-and-References">1</a></sup> to generate random strings in Bash. It’s useful when you want to generate temporary IDs or passwords. </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /dev/urandom <span class="token operator">|</span> <span class="token function">tr</span> -dc A-Za-z0-9 <span class="token operator">|</span> <span class="token function">head</span> -c <span class="token number">13</span> <span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>You can remove the <code>echo</code> part to remove the new line character. For <code>tr</code>, it is used to select out the characters in the given regex pattern. <code>-c</code> for <code>head</code> is for number of characters. By this line, you can generate a 13-character long random string. An example usage of this command is as follows.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">tmpfile</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /dev/urandom <span class="token operator">|</span> <span class="token function">tr</span> -dc A-Za-z0-9 <span class="token operator">|</span> <span class="token function">head</span> -c <span class="token number">13</span><span class="token variable">)</span></span><span class="token function">hostname</span> -i <span class="token operator">></span> <span class="token variable">$tmpfile</span><span class="token function">ping</span> -c <span class="token number">1</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> $tmpfile<span class="token variable">)</span></span><span class="token function">rm</span> -f <span class="token variable">$tmpfile</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>The grammar <code>$(...)</code> is just getting the output of a command as a string. A newer syntax for this is backticks <code>`...`</code>. This is an unnecessarily complicated example just to show you how to use this. Maybe a better one is just <code>ping -c 1 $(hostname -i)</code>.</p><h2 id="Notes-and-References"><a href="#Notes-and-References" class="headerlink" title="Notes and References"></a>Notes and References</h2><ol><li><a href="https://unix.stackexchange.com/a/230676">Unix: How to generate a random string?</a></li></ol><hr><h6 align="right"><a href="#">Next</a> | <a href="/programming/linux/tutorial/preface">Home</a></h6>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GNU/Linux Introduction</title>
      <link href="/programming/linux/tutorial/preface/"/>
      <url>/programming/linux/tutorial/preface/</url>
      
        <content type="html"><![CDATA[<div align="center" style="font-size: 33px">    GNU/Linux Introduction</div><div align="center" style="font-size: 20px">from the perspective of I/O<br><img src="https://img.shields.io/badge/Rebuild-714026292-orange" / loading="lazy"></div><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>I decided to write an introduction to the GNU/Linux based operating systems (I will call them “Linux” for the sake of simplicity) because throughout my undergraduate study and current working, I kind of begin to understand really how operating system really works and how the GNU tools (well basically they are just command-line commands, or if you like, executables and built-ins) designed for the Linux Kernel make life easier. I am definitely <strong>not</strong> an expert in any of operating systems or kernels, nor am I an experienced programmer, but I find out that Linux commands starts to become a part of life (even when I use Windows, I will use Linux commands provided by <a href="https://www.cygwin.com/">cygwin</a>), and that everyone in the region of computer science should learn (at least a bit) about Linux.</p><p>    <details>    <summary></summary>    <p>Well another reason for me to write this is that my girlfriend has just become a freshman in Computer Science...❤️</p>    <p>Knowledge keeps driving humanity. Any that might help, I will give. Just like the Ash in Dark Souls who will never give up knowing the faintness of Fire.</p>    </details></p><p>I think here I should tell you a little bit about Linux. If you only talk about plain Linux, it is a <strong>kernel</strong>, rather an OS. The GNU project made tools around the Kernel. And…</p><blockquote><p>So it happened that at the same time there was a project for a kernel without tools (Linux), and a project with all the tools but without a kernel (GNU). As both were written with the same UNIX mindset it was possible to combine them into a full operating system which people aptly called “GNU/Linux”. <sup><a href="#References">1</a></sup></p></blockquote><p>I won’t talk so much about what exactly is Linux or who made Linux (sorry Linux Torvalds) because my aim is not here. You really should check out the <a href="https://en.wikipedia.org/wiki/Linux_kernel">Wikipedia page</a> if you are really interested. Instead, I would like to introduce you the GNU/Linux, on Ubuntu, with its command-line interface and command-line tools <em>from the perspective of I/O</em>. (However I/O is much too important for me to tell you about the whole thing in this short intro.)</p><p>Though an introduction, this tutorial still targets people with a few experience in Computer Science. If you are a beginner or a new-comer, please be sure that your basic knowledge in either programming or operating systems is solid enough. I will not teach anything basic about how to program in Linux.</p><p>Enjoy!</p><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><ul><li><a href="/programming/linux/tutorial/1-intro"><strong>1 Intro</strong></a></li><li><a href="/programming/linux/tutorial/2-files"><strong>2 Files</strong></a></li><li><a href="/programming/linux/tutorial/3-io"><strong>3 IO</strong></a></li><li><a href="/programming/linux/tutorial/commands">Appendix A: Shell Commands</a></li></ul><h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><p>If you have anything to supplement or you find any error, just comment below the web page, or contact me via <code>admin@rebuild.moe</code>!</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="https://unix.stackexchange.com/questions/94402/why-do-people-call-linux-a-kernel-rather-than-an-os">Why do people call Linux a kernel rather than an OS?</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GNU/Linux Introduction Appendix A</title>
      <link href="/programming/linux/tutorial/commands/"/>
      <url>/programming/linux/tutorial/commands/</url>
      
        <content type="html"><![CDATA[<div align="center" style="font-size: 33px"><b>    Appendix A: Shell Commands</b></div><p>Here I provide some useful commands and executables in shell which is portable on Linux or Unix based systems (Ubuntu, Debian, MacOS, Cygwin, …). For detailed description on how to use these commands, use <code>&lt;command&gt; --help</code>, <code>man &lt;command&gt;</code>, <code>info coreutils &lt;command&gt;</code>, or google them.</p><p>Some of the executables (such as <code>gcc</code>) does not come with some systems themselves. You might need to install them first. Just google <code>&lt;OS&gt; how to install &lt;package&gt;</code>.</p><table><thead><tr><th>Executable / Command</th><th>Stand For</th><th>Short Description</th></tr></thead><tbody><tr><td><code>bash</code></td><td><strong>B</strong>ourne-<strong>A</strong>gain <strong>sh</strong>ell</td><td>The most used shell</td></tr><tr><td><code>bg</code></td><td><strong>b</strong>ack<strong>g</strong>round</td><td>Make a process run in background</td></tr><tr><td><code>cat</code></td><td>con<strong>cat</strong>enate</td><td>Show contents of a file or stdin</td></tr><tr><td><code>cd</code></td><td><strong>c</strong>hange <strong>d</strong>irectory</td><td>Change directory</td></tr><tr><td><code>chmod</code></td><td><strong>ch</strong>ange <strong>mod</strong>e</td><td>Change access permissions of files</td></tr><tr><td><code>chown</code></td><td><strong>ch</strong>ange <strong>own</strong>er</td><td>Change the owner of files</td></tr><tr><td><code>cp</code></td><td><strong>c</strong>o<strong>p</strong>y</td><td>Copy a file to another path</td></tr><tr><td><code>diff</code></td><td><strong>diff</strong>erence</td><td>Check the difference between files</td></tr><tr><td><code>echo</code></td><td><strong>echo</strong></td><td>Print something</td></tr><tr><td><code>fg</code></td><td><strong>f</strong>ore<strong>g</strong>round</td><td>Bring a background job to foreground</td></tr><tr><td><code>gcc</code></td><td><strong>G</strong>NU <strong>c</strong>ompiler <strong>c</strong>ollection</td><td>The compiler collection for C, C++, and Fortran</td></tr><tr><td><code>grep</code></td><td><code>g/re/p</code>: <strong>g</strong>lobal <strong>r</strong>egular <strong>e</strong>xpression <strong>p</strong>rint</td><td>Search in files or streams for lines that match a regular expression</td></tr><tr><td><code>id</code></td><td><strong>id</strong>entity</td><td>Print user and group information</td></tr><tr><td><code>jobs</code></td><td><strong>jobs</strong></td><td>Check status of jobs running in current terminal</td></tr><tr><td><code>kill</code></td><td><strong>kill</strong></td><td>Send a signal to a process (not necessarily <code>SIGKILL</code>!)</td></tr><tr><td><code>ls</code></td><td><strong>l</strong>i<strong>s</strong>t contents</td><td>List contents in a directory</td></tr><tr><td><code>man</code></td><td><strong>man</strong>ual</td><td>Manual for commands</td></tr><tr><td><code>mv</code></td><td><strong>m</strong>o<strong>v</strong>e</td><td>Move a file or directory to another path</td></tr><tr><td><code>ps</code></td><td><strong>p</strong>roce<strong>s</strong>s</td><td>Check processes running in the system</td></tr><tr><td><code>pwd</code></td><td><strong>p</strong>rint <strong>w</strong>orking <strong>d</strong>irectory</td><td>Print the full path of current directory to stdout</td></tr><tr><td><code>rm</code></td><td><strong>r</strong>e<strong>m</strong>ove</td><td>Delete a file</td></tr><tr><td><code>scp</code></td><td><strong>s</strong>ecure <strong>c</strong>o<strong>p</strong>y</td><td>Copy or transfer files to a remote endpoint</td></tr><tr><td><code>sed</code></td><td><strong>s</strong>tream <strong>ed</strong>itor</td><td>Edit a file or stream with command-line</td></tr><tr><td><code>sh</code></td><td><strong>sh</strong>ell</td><td>The most basic shell with few features</td></tr><tr><td><code>sleep</code></td><td><strong>sleep</strong></td><td>Suspends program execution for a specified time</td></tr><tr><td><code>ssh</code></td><td><strong>s</strong>ecure <strong>sh</strong>ell</td><td>A remote login interface and shell</td></tr><tr><td><code>su</code></td><td><strong>s</strong>witch <strong>u</strong>ser</td><td>Switch to and login as another user</td></tr><tr><td><code>sudo</code></td><td><strong>s</strong>uper <strong>u</strong>ser <strong>do</strong></td><td>Execute a command in elevated privilege (root)</td></tr><tr><td><code>tar</code></td><td><strong>t</strong>ape <strong>ar</strong>chive</td><td>Pack files and have the ability to compress</td></tr><tr><td><code>top</code></td><td><strong>t</strong>able <strong>o</strong>f <strong>p</strong>rocesses</td><td>A real-time process monitor</td></tr><tr><td><code>touch</code></td><td><strong>touch</strong></td><td>Create a file, or change and modify timestamps of a file</td></tr><tr><td><code>tr</code></td><td><strong>tr</strong>anslate</td><td>Substitute contents, or select or delete contents from input</td></tr><tr><td><code>vi</code></td><td><strong>v</strong>isual <strong>i</strong>nstrument</td><td>A visual editor</td></tr><tr><td><code>vim</code></td><td><strong><code>vi</code></strong> i<strong>m</strong>proved</td><td>A better visual editor</td></tr><tr><td><code>which</code></td><td><strong>which</strong></td><td>Identify the location of a given executable in <code>PATH</code></td></tr></tbody></table><hr><h6 align="right"><a href="/programming/linux/tutorial/preface">Home</a></h6>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Playlist Synchronizer</title>
      <link href="/programming/playlist-sync/"/>
      <url>/programming/playlist-sync/</url>
      
        <content type="html"><![CDATA[<h2 id="Project-Milestones"><a href="#Project-Milestones" class="headerlink" title="Project Milestones"></a>Project Milestones</h2><blockquote><p>新坑 | New Project</p></blockquote><ul><li>[10/18/2020] Suddenly got the mind of doing a playlist synchronizer.</li><li>[10/19/2020] From multiple available languages (Rust, Go, C#, etc.) I finally chose C# to develop. It seems that it’s the easiest. However I found out that there is no available documents on the APIs of QQ music. I have to find it myself.</li><li>[10/21/2020] Structures.</li></ul><h2 id="Project-Description"><a href="#Project-Description" class="headerlink" title="Project Description"></a>Project Description</h2><p>A playlist synchronizer to help synchronize playlists of some music players (now planned for QQ Music and NetEase Cloud Music). No plan for foreign apps such as Spotify.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Projects </tag>
            
            <tag> New </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用日语学中文</title>
      <link href="/japanese/japanese-kanbun/"/>
      <url>/japanese/japanese-kanbun/</url>
      
        <content type="html"><![CDATA[<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>日语的汉字是从古代中文传过去的，所以以前日语虽然口语中语法是土著日语的语法，但是最初，日语书写是完全用汉字的。最早以前，汉字仅仅用来作为发音手段使用，也就是现在的假名，那时称为「<ruby>万葉仮名<rp>(</rp><rt>まんようがな</rt><rp>)</rp></ruby>」。而从中国唐代开始，中文的语法便开始传入日本，而日本人也欣然接受了阅读文言文，并且使用日语去训读文言文。历史这里就不多做考究，这里只图一乐。</p><h2 id="漢文-かんぶん"><a href="#漢文-かんぶん" class="headerlink" title="漢文(かんぶん)"></a><div><ruby>漢文<rp>(</rp><rt>かんぶん</rt><rp>)</rp></ruby></div></h2><p>汉文，也就是我们所说的文言文，是现在日本人初高中国语课上需要学习的内容。它专门指<strong>古代中国的诗词歌赋</strong>。然而，日本人要阅读汉文是非常难的，因为语序完全不同。顺便一提，日语中有很多汉字词的意思和现代汉语不同，但是与文言相似。这里便做一个简单的入门介绍（并不是专家，如有错误请指正）。</p><p>先来看一个大家非常熟悉的。</p><blockquote><p>学而時習之、不亦説乎。</p></blockquote><p>对于中国人来说，这是再熟悉不过的了。其实对于日本人来说这也是，因为这是汉文入门要学习的第一个句子。我们来看一下用日语怎么读。</p><blockquote><p><ruby>学<rp>(</rp><rt>まな</rt><rp>)</rp></ruby>びて時に<ruby>之<rp>(</rp><rt>これ</rt><rp>)</rp></ruby>を習ふ、<ruby>亦<rp>(</rp><rt>また</rt><rp>)</rp></ruby><ruby>説<rp>(</rp><rt>よろこ</rt><rp>)</rp></ruby>ばしからずや。</p></blockquote><p>当然，这里需要一些古代日语的知识，不过这里就看一下大概意思就好。变成日语后的意思是“学习的时候不断地复习，难道不是很开心的吗？”这对原文的解释还是比较恰当的。这里，「説」被翻译成了「<ruby>悦<rp>(</rp><rt>よろこ</rt><rp>)</rp></ruby>ぶ」，也就是我们所学到的“说，通悦”。</p><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>我们知道日语和中文的语序是反的。大体上，语言按主语(S)、谓语(V)、宾语(O)的顺序，可以分成两种：</p><ol><li>主谓宾 (SVO)</li><li>主宾谓 (SOV)</li></ol><p>中文，包括文言文，都使用了SVO，而日语使用了SOV。举一个日语入门时候的例子：</p><blockquote><p>私は　テレビを　見る。<br>我　　电视　　　看</p></blockquote><p>于是，要训读文言文时，语序就需要调整，而这也就是学习汉文最重要的点。</p><h3 id="返-かえ-り点-てん"><a href="#返-かえ-り点-てん" class="headerlink" title="返(かえ)り点(てん)"></a><div><ruby>返<rp>(</rp><rt>かえ</rt><rp>)</rp></ruby>り<ruby>点<rp>(</rp><rt>てん</rt><rp>)</rp></ruby></div></h3><p>为了调整文言文语序，使用「返り点」进行表注。</p><h4 id="レ点"><a href="#レ点" class="headerlink" title="レ点"></a>レ点</h4><p>当有两个<strong>字</strong>的语序在日语中颠倒时，使用「レ点」表注。</p><blockquote><p>無　所　取　材。</p></blockquote><p>在日语中，应当这样读：</p><blockquote><p>材を取る所無し。</p></blockquote><p>所以，表注方法应该是：</p><blockquote><p>無<sub style="color: #d3ad43">レ</sub>所<sub style="color: #d3ad43">レ</sub>取<sub style="color: #d3ad43">レ</sub>材。</p></blockquote><p>读的顺序便是：</p><blockquote><p>無　所　取　材。<br>４　３　２　１</p></blockquote><h4 id="一二点"><a href="#一二点" class="headerlink" title="一二点"></a>一二点</h4><p>当有<strong>多个字</strong>需要调整语序，使用「一二点」表注。</p><blockquote><p>思　君　事。</p></blockquote><p>在日语中，应当这样读：</p><blockquote><p>君の事を思ふ。</p></blockquote><p>所以，表注方法是：</p><blockquote><p>思<sub style="color: red"><b>二</b></sub>君　事<sub style="color: red"><b>一</b></sub>。</p></blockquote><p>读的顺序便是：</p><blockquote><p>思　君　事。<br>３　１　２</p></blockquote><p>可以不止有一二点，有时会有三，甚至四。需要按实际情况使用。</p><h4 id="上下点"><a href="#上下点" class="headerlink" title="上下点"></a>上下点</h4><p>当含有「一二点」的语句需要再次调整语序时，使用「上下点」。</p><blockquote><p>有　観　梅　花　者。</p></blockquote><p>在日语中，应当这样读：</p><blockquote><p style="font-size: 20px;height: 180px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;"><ruby>梅花<rp>(</rp><rt>ばいか</rt><rp>)</rp></ruby>を<ruby>観<rp>(</rp><rt>み</rt><rp>)</rp></ruby>る者有り。</p></blockquote><p>所以，表注方法是：</p><blockquote><p style="font-size: 20px;height: 190px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;">有<sub style="color: green">下</sub>観<sub style="color: red"><b>二</b></sub>梅花<sub style="color: red"><b>一</b></sub>者<sub style="color: green">上</sub>。</p></blockquote><p>那么顺序就变成了：</p><blockquote><p>有　観　梅　花　者。<br>５　３　１　２　４</p></blockquote><p>可以不止有上下点，有时会有中。需要按实际情况使用。</p><p>如果外面还要再套语序调整，则会有「天地人」、「甲乙丙」等，但是这里就不做介绍了。</p><h4 id="レ点＋ほかの点"><a href="#レ点＋ほかの点" class="headerlink" title="レ点＋ほかの点"></a>レ点＋ほかの点</h4><p>有时的语序需要跳过一个字再使用一二点或上下点，此时需要与「レ点」结合。由于日语是竖着书写的，所以「一」和「レ」合在一起时是上下结合的。当然，「一」可以换成「二、上」等。这里就分开写了。看一个例子：</p><blockquote><p>楚　人　有　鬻　盾　与　矛　者。</p></blockquote><p>日语的训读应该是这样的：</p><blockquote><p style="font-size: 20px;height: 150px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;"><ruby>楚人<rp>(</rp><rt>そひと</rt><rp>)</rp></ruby>に<ruby>盾<rp>(</rp><rt>たて</rt><rp>)</rp></ruby>と<ruby>矛<rp>(</rp><rt>ほこ</rt><rp>)</rp></ruby>とを<ruby>鬻<rp>(</rp><rt>ひさ</rt><rp>)</rp></ruby>ぐ者有り。</p></blockquote><p>所以，表注方法是：</p><blockquote><p style="font-size: 20px;height: 150px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;">楚人　有<sub style="color: green">下</sub>鬻<sub style="color: red"><b>二</b></sub>盾与<span><sub style="color: red;letter-spacing: -0.75rem;"><b>一</b></sub><sub style="color: #d3ad43">レ</sub></span>矛者<sub style="color: green">上</sub>。</p></blockquote><p>那么顺序就变成了：</p><blockquote><p>楚　人　有　鬻　盾　与　矛　者。<br>１　２　８　６　３　５　４　７</p></blockquote><h3 id="書-か-き下-くだ-し文-ぶん"><a href="#書-か-き下-くだ-し文-ぶん" class="headerlink" title="書(か)き下(くだ)し文(ぶん)"></a><div><ruby>書<rp>(</rp><rt>か</rt><rp>)</rp></ruby>き<ruby>下<rp>(</rp><rt>くだ</rt><rp>)</rp></ruby>し<ruby>文<rp>(</rp><rt>ぶん</rt><rp>)</rp></ruby></div></h3><p>表注完返点后，其实还需表注助词。我们来看一个综合例子：</p><blockquote><p>子曰、温故而知新、可以為師矣。</p></blockquote><p>如果只看顺序，我们可以使用返点表注：</p><blockquote><p style="font-size: 20px;height: 220px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;">子曰、温<sub style="color: #d3ad43">レ</sub>故而知<sub style="color: #d3ad43">レ</sub>新、可<sub style="color: red"><b>二</b></sub>以為<sub style="color: red;letter-spacing: -0.75rem;"><b>一</b></sub><sub style="color: #d3ad43">レ</sub>師矣。</p></blockquote><p>然而，只是看这个的话我们真的会读了吗？并不。所以，我们需要有一些提示，使它能用日语读出来。</p><blockquote><p style="font-size: 20px;height: 250px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;">子曰<sup>ク</sup>、温<sup>メテ</sup><sub style="color: #d3ad43">レ</sub>故<sup>キヲ</sup><span style="color: blue">而</span>知<sup>ラバ</sup><sub style="color: #d3ad43">レ</sub>新<sup>シキヲ</sup>、可<sup>シ</sup><sub style="color: red"><b>二</b></sub>以<sup>テ</sup>為<sup>ル</sup><sub style="color: red;letter-spacing: -0.75rem;"><b>一</b></sub><sub style="color: #d3ad43">レ</sub>師<span style="color: blue">矣</span>。</p></blockquote><p>注意，这里有几个字是不读的，例如「<strong>而</strong>」和「<strong>矣</strong>」，它们被叫做「<ruby>置字<rp>(</rp><rt>おきじ</rt><rp>)</rp></ruby>」。这样一来，就可以很简单地用古日语读出：</p><blockquote><p style="font-size: 20px;height: 220px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;">子曰く、故きを温めて新しきを知らば、<ruby>以<rp>(</rp><rt>もっ</rt><rp>)</rp></ruby>て師<ruby>為<rp>(</rp><rt>た</rt><rp>)</rp></ruby>るべし。</p></blockquote><p>而上面这个句子，就被叫做「書き下し文」。书下文有很多规则，例如助词不写汉字之类，这里不详细阐述。我们主要还是为了能用日语读出文言文。我觉得这是很有趣的一件事。</p><h3 id="再読文字-さいどくもじ"><a href="#再読文字-さいどくもじ" class="headerlink" title="再読文字(さいどくもじ)"></a><div><ruby>再読文字<rp>(</rp><rt>さいどくもじ</rt><rp>)</rp></ruby></div></h3><p>有时候，一个汉字的意思在日语里需要通过两个词表达。这个时候，这个汉字就需要读两遍，称为「再読文字」。再读文字一共有8个，下面就会介绍。</p><p>再读文字的特点是，它们本身都是副词而不是助词，需要读出来。但是，又有一个助词需要放在其它位置，也属于这个字的意思的一部分，也需要读出来。所以，就需要读两遍。</p><h4 id="未"><a href="#未" class="headerlink" title="未"></a>未</h4><p>「未」这个字，表示「还没有」的意思，所以应该表否定。我们知道日语中否定是放在最后的，例如现代日语中的「ない」和古日语中的「ず」。所以，这个字需要读出来，但是否定也应该表示。由于副词和终助词「ず」无法放在一起，所以它就变成了一个再读文字。</p><p>読み：いまダ～ず</p><p>我们来看一个最简单的例子：</p><blockquote><p>未　来</p></blockquote><p>未来，即还没有到来的事。如果要读出，应该是：</p><blockquote><p><ruby>未<rp>(</rp><rt>いま</rt><rp>)</rp></ruby>だ<ruby>来<rp>(</rp><rt>きた</rt><rp>)</rp></ruby>らず</p></blockquote><p>所以，使用返点之后会变成这样：</p><blockquote><p><ruby>未<rp>(</rp><rt>いま・ず</rt><rp>)</rp></ruby><sub style="color: #d3ad43">レ</sub><sup>ダ</sup><ruby>来<rp>(</rp><rt>きた</rt><rp>)</rp></ruby><sup>ラ</sup></p></blockquote><p>在书写中，再读文字的振り仮名竖着会右边写第一遍的读音，左边写第二遍的读音，而这里使用了点代替。再读文字的送り仮名一样，也是跟着左右写，这里因为「未」的第二遍没有送り仮名，所以没有写出。</p><p>注意，在书写書き下し文时，只应出现<strong>一遍</strong>这个汉字，作为助词的那一次需要使用平假名写出。我们看一个更复杂一些的例子：</p><blockquote><p>未　聞　好　学　者　也。</p></blockquote><p>我们先表注返点：</p><blockquote><p style="font-size: 20px;height: 220px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;"><ruby>未<rp>(</rp><rt>いま・ざ</rt><rp>)</rp></ruby><sub>ル</sub><sup>ダ</sup><sub style="color: #d3ad43">レ</sub>聞<sup>カ</sup><sub style="color: red;"><b>二</b></sub>好<sup>ム</sup><sub style="color: #d3ad43">レ</sub>学<sup>ヲ</sup>者<sup>ヲ</sup><sub style="color: red;"><b>一</b></sub><ruby>也<rp>(</rp><rt>なり</rt><rp>)</rp></ruby>。</p></blockquote><p>注意这里的助词「ず」的变形，变形之后也需要表注送り仮名。接下来我们写出书下文：</p><blockquote><p style="font-size: 20px;height: 220px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;"><ruby>未<rp>(</rp><rt>いま</rt><rp>)</rp></ruby>だ学を好む者を聞か<span style="color: darkcyan">ざるなり</span>。</p></blockquote><p>注意这里标出颜色的地方，是不能用汉字写出的。</p><h4 id="将・且"><a href="#将・且" class="headerlink" title="将・且"></a>将・且</h4><p>表示「将要」的意思时是再读文字。</p><p>読み：まさニ～ントす</p><p>看一个例子：</p><blockquote><p>将　来</p></blockquote><p>表注返点后是：</p><blockquote><p><ruby>将<rp>(</rp><rt>まさ・す</rt><rp>)</rp></ruby><sup>ニ</sup><sub style="color: #d3ad43">レ</sub>来<sup>ラント</sup></p></blockquote><p>书下文便是：</p><blockquote><p><ruby>将<rp>(</rp><rt>まさ</rt><rp>)</rp></ruby>に来らんとす</p></blockquote><p>再来看一个：</p><blockquote><p>伐趙、趙将亡矣。</p></blockquote><p>表注返点之后是：</p><blockquote><p style="font-size: 20px;height: 220px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;"><ruby>伐<rp>(</rp><rt>う</rt><rp>)</rp></ruby><sup>チ</sup><sub style="color: #d3ad43">レ</sub><ruby>趙<rp>(</rp><rt>ちょう</rt><rp>)</rp></ruby><sup>ヲ</sup>、趙将<sup>ニ</sup><sub style="color: #d3ad43">レ</sub>亡<sup>ビント</sup><span style="color: blue">矣</span>。</p></blockquote><p>书下文便是：</p><blockquote><p style="font-size: 20px;height: 220px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;">趙を伐ち、趙将に亡びんとす。</p></blockquote><p>剩下的摸了摸了🐟🐟🐟🐟</p><h2 id="例文"><a href="#例文" class="headerlink" title="例文"></a>例文</h2><h3 id="出師表-すいしのひょう"><a href="#出師表-すいしのひょう" class="headerlink" title="出師表(すいしのひょう)"></a><ruby>出師表<rp>(</rp><rt>すいしのひょう</rt><rp>)</rp></ruby></h3><p>节选了<strong>最后一节</strong>。</p><h4 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h4><p style="font-size: 20px;height: 300px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;">臣不勝受​恩​感激​。今​​当遠​離、臨​表​涕泣、不知​所​云​。</p><h4 id="返り点付き"><a href="#返り点付き" class="headerlink" title="返り点付き"></a>返り点付き</h4><p style="font-size: 20px;height: 300px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;">臣不<sub style="color: #d3ad43">レ</sub>勝<sup>ヘ</sup><sub style="color: red"><b>二</b></sub>受<sup>ケ</sup>​<sub style="color: #d3ad43">レ</sub>恩<sup>ヲ</sup>​感激​<sup>スルニ</sup><sub style="color: red"><b>一</b></sub>。今​当<sup>ニ・シ</sup><sub style="color: red"><b>二</b></sub>遠<sup>ク</sup>​離<sup>ル</sup><sub style="color: red"><b>一</b></sub>、臨​<sup>ミ</sup><sub style="color: #d3ad43">レ</sub>表<sup>ニ</sup>​<ruby>涕泣<rp>(</rp><rt>でいきゅう</rt><rp>)</rp></ruby><sup>ス</sup>、不<sub style="color: #d3ad43">レ</sub>知<sup>ラ</sup><sub style="color: #d3ad43">レ</sub>​所<sup>ヲ</sup><sub style="color: #d3ad43">レ</sub>​云​<sup>フ</sup>。</p><h4 id="書き下し文"><a href="#書き下し文" class="headerlink" title="書き下し文"></a>書き下し文</h4><p style="font-size: 20px;height: 300px;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;">臣恩を受け感激するに勝へず。今当に遠く離るべし、表に臨み涕泣す、云ふ所を知らず。</p><h3 id="桃花源ノ記-どうかげんのき"><a href="#桃花源ノ記-どうかげんのき" class="headerlink" title="桃花源ノ記(どうかげんのき)"></a><ruby>桃花源<sup>ノ</sup>記<rp>(</rp><rt>どうかげんのき</rt><rp>)</rp></ruby></h3><h4 id="原文-1"><a href="#原文-1" class="headerlink" title="原文"></a>原文</h4><div style="font-size: 20px;height: 300px;max-width: 100%;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl; overflow: scroll;">  <p style="margin-top: 1rem">晋太元中、武陵人捕魚為業。縁渓行、忘路之遠近。忽逢桃花林。夾岸数百歩、中無雑樹。芳草鮮美、落英繽紛。漁人甚異之、復前行、欲窮其林。</p>  <p>林尽水源、便得一山。山有小口、彷彿若有光。便捨船、従口入。初極狭、纔通人。復行数十歩、豁然開朗。土地平曠、屋舎儼然。有良田美池、桑竹之属。阡陌交通、鶏犬相聞。其中往来種作男女衣着、悉如外人。黄髪垂髫、並怡然自楽。</p>  <p>見漁人、乃大驚、問所従来。具答之。便要還家、設酒殺鶏作食。村中聞有此人、咸来問訊。自云、「先世避秦時乱、率妻子邑人、来此絶境、不復出焉。遂与外人間隔。」問、「今是何世。」乃不知有漢、無論魏晋。此人一一為具言所聞、皆歎惋。余人各復延至其家、皆出酒食。停数日辞去。此中人語云、「不足為外人道也。」</p>  <p>既出。得其船、便扶向路、処処誌之。及郡下、詣太守説如此。太守即遣人随其往、尋向所誌、遂迷不復得路。</p>  <p style="margin-bottom:1rem">南陽劉子驥高尚士也。聞之、欣然規往。未果、尋病終。後遂無問津者。</p></div><h4 id="返り点付き-1"><a href="#返り点付き-1" class="headerlink" title="返り点付き"></a>返り点付き</h4><div style="font-size: 20px;height: 300px;max-width:100%;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;overflow:auto;">  <p style="margin-top: 1rem"><ruby>晋<rp>(</rp><rt>しん</rt><rp>)</rp></ruby><sup>ノ</sup><ruby>太元<rp>(</rp><rt>たいげん</rt><rp>)</rp></ruby>中、<ruby>武陵<rp>(</rp><rt>ぶりょう</rt><rp>)</rp></ruby><sup>ノ</sup>人捕<sup>ラフルヲ</sup><span style="color: #d3ad43;"><sub>レ</sub></span><ruby>魚<rp>(</rp><rt>うお</rt><rp>)</rp></ruby><sup>ヲ</sup><ruby>為<rp>(</rp><rt>な</rt><rp>)</rp></ruby><sup>ス</sup><span style="color: #d3ad43;"><sub>レ</sub></span>業<sup>ト</sup>。<ruby>縁<rp>(</rp><rt>よ</rt><rp>)</rp></ruby><sup>リテ</sup><span style="color: #d3ad43;"><sub>レ</sub></span><ruby>渓<rp>(</rp><rt>たに</rt><rp>)</rp></ruby><sup>ニ</sup>行<sup>キ</sup>、忘<sup>ル</sup><span style="color: red;"><sub><b>二</b></sub></span>路之遠近<sup>ヲ</sup><span style="color: red;"><sub><b>一</b></sub></span>。<ruby>忽<rp>(</rp><rt>たちま</rt><rp>)</rp></ruby><sup>チ</sup>逢<sup>フ</sup><span style="color: red;"><sub><b>二</b></sub></span>桃花<sup>ノ</sup>林<sup>ニ</sup><span style="color: red;"><sub><b>一</b></sub></span>。夾<sup>ムコト</sup><span style="color: #d3ad43;"><sub>レ</sub></span>岸<sup>ヲ</sup>数百歩、中<sup>ニ</sup>無<sup>シ</sup><span style="color: red;"><sub><b>二</b></sub></span>雑樹<span style="color: red;"><sub><b>一</b></sub></span>。芳草<ruby>鮮美<rp>(</rp><rt>せんび</rt><rp>)</rp></ruby>、<ruby>落英<rp>(</rp><rt>らくえい</rt><rp>)</rp></ruby><ruby>繽紛<rp>(</rp><rt>ひんぷん</rt><rp>)</rp></ruby><sup>タリ</sup>。漁人甚<sup>ダ</sup>異<sup>トシ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>之<sup>ヲ</sup>、復<sup>タ</sup><ruby>前<rp>(</rp><rt>すす</rt><rp>)</rp></ruby><sup>ミ</sup>行<sup>キテ</sup>、欲<sup>ス</sup><span style="color: #d3ad43;"><sub>レ</sub></span><ruby>窮<rp>(</rp><rt>きわ</rt><rp>)</rp></ruby><sup>メント</sup><span style="color: red;"><sub><b>二</b></sub></span>其<sup>ノ</sup>林<span style="color: red;"><sub><b>一</b></sub></span><sup>ヲ</sup>。</p>  <p>林尽<sup>キ</sup><span style="color: red;"><sub><b>二</b></sub></span>水源<sup>ニ</sup><span style="color: red;"><sub><b>一</b></sub></span>、<ruby>便<rp>(</rp><rt>すなは</rt><rp>)</rp></ruby><sup>チ</sup><ruby>得<rp>(</rp><rt>え</rt><rp>)</rp></ruby><sup>タリ</sup><span style="color: red;"><sub><b>二</b></sub></span><ruby>一山<rp>(</rp><rt>いちざん</rt><rp>)</rp></ruby><sup>ヲ</sup><span style="color: red;"><sub><b>一</b></sub></span>。山<sup>ニ</sup>有<sup>リ</sup><span style="color: red;"><sub><b>二</b></sub></span>小口<span style="color: red;"><sub><b>一</b></sub></span>、<ruby>彷彿<rp>(</rp><rt>ほうふつ</rt><rp>)</rp></ruby><sup>トシテ</sup>若<sup>シ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>有<sup>ルガ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>光。便<sup>チ</sup>捨<sup>テテ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>船<sup>ヲ</sup>、<ruby>従<rp>(</rp><rt>よ</rt><rp>)</rp></ruby><sup>リ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>口入<sup>ル</sup>。初<sup>メハ</sup>極<sup>メテ</sup>狭<sup>ク</sup>、<ruby>纔<rp>(</rp><rt>わず</rt><rp>)</rp></ruby><sup>カニ</sup><ruby>通<rp>(</rp><rt>つう</rt><rp>)</rp></ruby><sup>ズルノミ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>人<sup>ヲ</sup>。復<sup>タ</sup>行<sup>クコト</sup>数十歩、豁然<sup>トシテ</sup>開朗<sup>ナリ</sup>。土地<ruby>平曠<rp>(</rp><rt>へいこう</rt><rp>)</rp></ruby>、<ruby>屋舎<rp>(</rp><rt>をくしゃ</rt><rp>)</rp></ruby><ruby>儼然<rp>(</rp><rt>げんぜん</rt><rp>)</rp></ruby><sup>タリ</sup>。有<sup>リ</sup><span style="color: red;"><sub><b>二</b></sub></span><ruby>良田<rp>(</rp><rt>りょうでん</rt><rp>)</rp></ruby><ruby>美池<rp>(</rp><rt>びち</rt><rp>)</rp></ruby>、<ruby>桑竹<rp>(</rp><rt>そうちく</rt><rp>)</rp></ruby>之<ruby>属<rp>(</rp><rt>ぞく</rt><rp>)</rp></ruby><span style="color: red;"><sub><b>一</b></sub></span>。<ruby>阡陌<rp>(</rp><rt>せんぱく</rt><rp>)</rp></ruby><ruby>交<rp>(</rp><rt>こもごも</rt><rp>)</rp></ruby><ruby>通<rp>(</rp><rt>つう</rt><rp>)</rp></ruby><sup>ジ</sup>、<ruby>鶏犬<rp>(</rp><rt>けいけん</rt><rp>)</rp></ruby>相聞<sup>コユ</sup>。其<sup>ノ</sup><ruby>中<rp>(</rp><rt>うち</rt><rp>)</rp></ruby><sup>ニ</sup>往来<sup>シ</sup><ruby>種作<rp>(</rp><rt>しゅさく</rt><rp>)</rp></ruby><sup>スル</sup>男女<sup>ノ</sup>衣着<sup>ハ</sup>、<ruby>悉<rp>(</rp><rt>ことごと</rt><rp>)</rp></ruby><sup>ク</sup>如<sup>シ</sup><span style="color: red;"><sub><b>二</b></sub></span>外人<sup>ノ</sup><span style="color: red;"><sub><b>一</b></sub></span>。<ruby>黄髪<rp>(</rp><rt>こうはつ</rt><rp>)</rp></ruby><ruby>垂髫<rp>(</rp><rt>すいちょう</rt><rp>)</rp></ruby>、並<sup>ビニ</sup>怡然<sup>トシテ</sup>自<sup>ラ</sup>楽<sup>シム</sup>。</p>  <p>見<sup>テ</sup><span style="color: red;"><sub><b>二</b></sub></span>漁人<sup>ヲ</sup><span style="color: red;"><sub><b>一</b></sub></span>、乃<sup>チ</sup>大<sup>イニ</sup>驚<sup>キ</sup>、問<sup>フ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>所<sup>ヲ</sup><span style="color: red;"><sub><b>二</b></sub></span>従<sup>リテ</sup>来<sup>タル</sup><span style="color: red;"><sub><b>一</b></sub></span>。<ruby>具<rp>(</rp><rt>つぶさ</rt><rp>)</rp></ruby><sup>ニ</sup>答<sup>フ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>之<sup>ニ</sup>。便<sup>チ</sup><ruby>要<rp>(</rp><rt>よう</rt><rp>)</rp></ruby><sup>シテ</sup>還<sup>リ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>家<sup>ニ</sup>、<ruby>設<rp>(</rp><rt>もう</rt><rp>)</rp></ruby><sup>ケ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>酒<sup>ヲ</sup>殺<sup>シテ</sup><span style="color: #d3ad43;"><sub>レ</sub></span><ruby>鶏<rp>(</rp><rt>にわとり</rt><rp>)</rp></ruby><sup>ヲ</sup>作<sup>ル</sup><span style="color: #d3ad43;"><sub>レ</sub></span>食<sup>ヲ</sup>。村中聞<sup>キ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>有<sup>ルヲ</sup><span style="color: red;"><sub><b>二</b></sub></span>此<sup>ノ</sup>人<span style="color: red;"><sub><b>一</b></sub></span>、<ruby>咸<rp>(</rp><rt>みな</rt><rp>)</rp></ruby>来<sup>タリテ</sup><ruby>問訊<rp>(</rp><rt>もんじん</rt><rp>)</rp></ruby><sup>ス</sup>。自<sup>ラ</sup>云<sup>フ</sup>、「先世避<sup>ケ</sup><span style="color: red;"><sub><b>二</b></sub></span><ruby>秦<rp>(</rp><rt>しん</rt><rp>)</rp></ruby>時<sup>ノ</sup>乱<sup>ヲ</sup><span style="color: red;"><sub><b>一</b></sub></span>、<ruby>率<rp>(</rp><rt>ひき</rt><rp>)</rp></ruby><sup>ヰテ</sup><span style="color: red;"><sub><b>二</b></sub></span><ruby>妻子<rp>(</rp><rt>さいし</rt><rp>)</rp></ruby><ruby>邑人<rp>(</rp><rt>ゆうじん</rt><rp>)</rp></ruby><sup>ヲ</sup><span style="color: red;"><sub><b>一</b></sub></span>、来<sup>タリ</sup><span style="color: red;"><sub><b>二</b></sub></span>此<sup>ノ</sup>絶境<sup>ニ</sup><span style="color: red;"><sub><b>一</b></sub></span>、不<span style="color: red;"><sub><b>二</b></sub></span>復<sup>タ</sup><ruby>出<rp>(</rp><rt>い</rt><rp>)</rp></ruby><sup>デ</sup><span style="color: red;"><sub><b>一</b></sub></span><span style="color: blue;">焉</span>。遂<sup>ニ</sup><ruby>与<rp>(</rp><rt>と</rt><rp>)</rp></ruby><span style="color: red;"><sub><b>二</b></sub></span>外人<span style="color: red;"><sub><b>一</b></sub></span><ruby>間隔<rp>(</rp><rt>かんかく</rt><rp>)</rp></ruby><sup>スト</sup>。」問<sup>フ</sup>、「今<sup>ハ</sup>是<sup>レ</sup>何<sup>ノ</sup>世<sup>ゾト</sup>。」乃<sup>チ</sup>不<span style="color: #d3ad43;"><sub>レ</sub></span>知<sup>ラ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>有<sup>ルヲ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>漢、無<sup>シ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>論<span style="color: red;"><sub><b>二</b></sub></span><ruby>魏晋<rp>(</rp><rt>ぎしん</rt><rp>)</rp></ruby><sup>ニ</sup><span style="color: red;"><sub><b>一</b></sub></span>。此<sup>ノ</sup>人一一為<sup>ニ</sup>具<sup>ニ</sup>言<sup>フニ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>所<sup>ヲ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>聞<sup>ク</sup>、皆<ruby>歎惋<rp>(</rp><rt>たんわん</rt><rp>)</rp></ruby><sup>ス</sup>。余人<ruby>各<rp>(</rp><rt>おのおの</rt><rp>)</rp></ruby>復<sup>タ</sup><ruby>延<rp>(</rp><rt>ひ</rt><rp>)</rp></ruby><sup>キテ</sup><ruby>至<rp>(</rp><rt>いた</rt><rp>)</rp></ruby><sup>リ</sup><span style="color: red;"><sub><b>二</b></sub></span>其<sup>ノ</sup>家<sup>ニ</sup><span style="color: red;"><sub><b>一</b></sub></span>、皆出<sup>ダス</sup><span style="color: red;"><sub><b>二</b></sub></span>酒食<sup>ヲ</sup><span style="color: red;"><sub><b>一</b></sub></span>。<ruby>停<rp>(</rp><rt>とど</rt><rp>)</rp></ruby><sup>マルコト</sup>数日<sup>ニシテ</sup><ruby>辞去<rp>(</rp><rt>じきょ</rt><rp>)</rp></ruby><sup>ス</sup>。此<sup>ノ</sup>中<sup>ノ</sup>人<ruby>語<rp>(</rp><rt>つ</rt><rp>)</rp></ruby><sup>ゲテ</sup>云<sup>フ</sup>、「<ruby>不<rp>(</rp><rt>ざ</rt><rp>)</rp></ruby><sup>ル</sup><span style="color: #d3ad43;"><sub>レ</sub></span>足<sup>ラ</sup><span style="color: green;"><sub>下</sub></span>為<sup>ニ</sup><span style="color: red;"><sub><b>二</b></sub></span>外人<sup>ノ</sup><span style="color: red;"><sub><b>一</b></sub></span>道<sup>フニ</sup><span style="color: green;"><sub>上</sub></span><ruby>也<rp>(</rp><rt>なり</rt><rp>)</rp></ruby><sup>ト</sup>。」</p>  <p><ruby>既<rp>(</rp><rt>すで</rt><rp>)</rp></ruby><sup>ニ</sup>出<sup>ヅ</sup>。得<sup>テ</sup><span style="color: red;"><sub><b>二</b></sub></span>其<sup>ノ</sup>船<sup>ヲ</sup><span style="color: red;"><sub><b>一</b></sub></span>、便<sup>チ</sup><ruby>扶<rp>(</rp><rt>よ</rt><rp>)</rp></ruby><sup>リ</sup><span style="color: red;"><sub><b>二</b></sub></span><ruby>向<rp>(</rp><rt>さき</rt><rp>)</rp></ruby><sup>ノ</sup>路<sup>ニ</sup><span style="color: red;"><sub><b>一</b></sub></span>、処処<sup>ニ</sup><ruby>誌<rp>(</rp><rt>しる</rt><rp>)</rp></ruby><sup>ス</sup><span style="color: #d3ad43;"><sub>レ</sub></span>之<sup>ヲ</sup>。及<sup>ビ</sup><span style="color: red;"><sub><b>二</b></sub></span><ruby>郡下<rp>(</rp><rt>ぐんか</rt><rp>)</rp></ruby><sup>ニ</sup><span style="color: red;"><sub><b>一</b></sub></span>、<ruby>詣<rp>(</rp><rt>いた</rt><rp>)</rp></ruby><sup>リテ</sup><span style="color: red;"><sub><b>二</b></sub></span>太守<sup>ニ</sup><span style="color: red;"><sub><b>一</b></sub></span><ruby>説<rp>(</rp><rt>と</rt><rp>)</rp></ruby><sup>クコト</sup>如<sup>シ</sup><span style="color: #d3ad43;"><sub>レ</sub></span><ruby>此<rp>(</rp><rt>か</rt><rp>)</rp></ruby><sup>クノ</sup>。太守即<sup>チ</sup><ruby>遣<rp>(</rp><rt>し</rt><rp>)</rp></ruby><sup>メシモ</sup><span style="color: red;"><sub><b>三</b></sub></span>人<sup>ヲシテ</sup><ruby>随<rp>(</rp><rt>したが</rt><rp>)</rp></ruby><sup>ヒテ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>其<sup>レニ</sup>往<sup>キ</sup>、尋<sup>ネ</sup><span style="color: red;"><sub><b>二</b></sub></span>向<sup>ニ</sup>所<sup>ヲ</sup><span style="color: red;letter-spacing: -0.75rem;"><sub>一</sub></span><span style="color: #d3ad43;"><sub>レ</sub></span>誌<sup>シシ</sup>、遂<sup>ニ</sup>迷<sup>ヒテ</sup>不<span style="color: red;"><sub><b>二</b></sub></span>復<sup>タ</sup>得<span style="color: red;letter-spacing: -0.75rem;"><sub>一</sub></span><span style="color: #d3ad43;"><sub>レ</sub></span>路<sup>ヲ</sup>。</p>  <p style="margin-bottom:1rem">南陽<sup>ノ</sup><ruby>劉<rp>(</rp><rt>りゅう</rt><rp>)</rp></ruby><ruby>子驥<rp>(</rp><rt>しき</rt><rp>)</rp></ruby><sup>ハ</sup>高尚<sup>ノ</sup>士也。聞<sup>キ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>之<sup>ヲ</sup>、<ruby>欣然<rp>(</rp><rt>きんぜん</rt><rp>)</rp></ruby><sup>トシテ</sup><ruby>規<rp>(</rp><rt>はか</rt><rp>)</rp></ruby><sup>ル</sup><span style="color: #d3ad43;"><sub>レ</sub></span>往<sup>カンコトヲ</sup>。未<sup>ダ</sup><span style="color: #d3ad43;"><sub>レ</sub></span>果<sup>タサ</sup>、<ruby>尋<rp>(</rp><rt>つ</rt><rp>)</rp></ruby><sup>イデ</sup><ruby>病<rp>(</rp><rt>や</rt><rp>)</rp></ruby><sup>ミテ</sup>終<sup>ハル</sup>。<ruby>後<rp>(</rp><rt>のち</rt><rp>)</rp></ruby>遂<sup>ニ</sup>無<sup>シ</sup><span style="color: red;"><sub><b>二</b></sub></span>問<sup>フ</sup><span style="color: #d3ad43;"><sub>レ</sub></span><ruby>津<rp>(</rp><rt>しん</rt><rp>)</rp></ruby><sup>ヲ</sup>者<span style="color: red;"><sub><b>一</b></sub></span>。</p></div><h4 id="書き下し文-1"><a href="#書き下し文-1" class="headerlink" title="書き下し文"></a>書き下し文</h4><div style="font-size: 20px;height: 300px;max-width: 100%;-webkit-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-ms-writing-mode: vertical-rl;writing-mode: vertical-rl;overflow-y:scroll;">  <p style="margin-top: 1rem">晋の太元中、武陵の人魚を捕らふるを業と為す。渓に縁りて行き、路の遠近を忘る。忽ち桃花の林に逢ふ。岸を夾むこと数百歩、中に雑樹無し。芳草鮮美、落英繽紛たり。漁人甚だ之を異とし、復た前み行きて、其の林を窮めんと欲す。</p>  <p>林水源に尽き、便ち一山を得たり。山に小口有り、彷彿として光有るがごとし。便ち船を捨てて、口より入る。初めは極めて狭く、纔かに人を通ずるのみ。復た行くこと数十歩、豁然として開朗なり。土地平曠、屋舎儼然たり。良田美池、桑竹の属有り。阡陌交通じ、鶏犬相聞こゆ。其の中に往来し種作する男女の衣着は、悉く外人のごとし。黄髪垂髫、並びに怡然として自ら楽しむ</p>  <p>漁人を見て、乃ち大いに驚き、従りて来たる所を問ふ。具に之に答ふ。便ち要して家に還り、酒を設け鶏を殺して食を作る。村中此の人有るを聞き、咸来たりて問訊す。自ら云ふ、「先世秦時の乱を避け、妻子邑人を率ゐて、此の絶境に来たり、復た出でず。遂に外人と間隔す。」と。問ふ、「今は是れ何の世ぞ。」と。乃ち漢有るを知らず、魏晋に論無し。此の人一一為に具に聞く所を言ふに、皆歎惋す。余人各復た延きて其の家に至り、皆酒食を出だす。停まること数日にして辞去す。此の中の人語げて云ふ、「外人の為に道ふに足らざるなり。」と。</p>  <p>既に出づ。其の船を得て、便ち向の路に扶り、処処に之を誌す。郡下に及び、太守に詣りて説くこと此くのごとし。太守即ち人をして其れに随ひて往き、向に誌しし所を尋ねしめしも、遂に迷ひて復た路を得ず。</p>  <p style="margin-bottom:1rem">南陽の劉子驥は高尚の士なり。之を聞き、欣然として往かんことを規る。未だ果たさず、尋いで病みて終はる。後遂に津を問ふ者無し。</p></div><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><blockquote><p>本文将持续更新。</p></blockquote><p>学习其实没有想象中痛苦，只是找到了乐趣罢了。学习日语对我而言不论是汉文还是古典日语都是非常有趣的一件事。我希望看到这里的人能够收获一点知识，并且能够发现自己的兴趣所在。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol><li><span id="ref-1"></span><a href="https://www.bilibili.com/video/av37156950">日本高中汉文课程</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Japanese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学分析作弊纸</title>
      <link href="/math/analysis-cheatsheet/"/>
      <url>/math/analysis-cheatsheet/</url>
      
        <content type="html"><![CDATA[<div style="display: none;">$\gdef\Q{\mathbb{Q}}$</div><h3 id="实数"><a href="#实数" class="headerlink" title="实数"></a>实数</h3><p>    <b>公理1.1：</b> $\N$是良序的，对于所有$\N$的非空子集$A$，$A$中必有最小元素。</p><p>    <b>定理1.2：数学归纳法</b> 若$P(n)$是一系列命题，如果$P(1)$是真命题，并且如果$P(m)$是真命题能推导出$P(m+1)$是真命题，那么对所有的$n \in \N$，$P(n)$是真命题。</p><p>    <b>定理1.3：</b>如果$A$和$B$是可数的，那么$A \times B$也是可数的。</p><p>    <b>推论1.4：</b>$\Q$是可数的。</p><p>    <b>定理1.5：（康托）</b>对于非空集$A$，$|A| &lt; |\mathcal{P}(A)|$，其中$\mathcal{P}(A)$是幂集。</p><p>    <b style="color: red;">定理1.6：</b><b>确界原理</b> 如果$S$是有序集，那么对任意的非空子集$E \subset S$，如果$E$有上界，那么必有上确界，如果有下界，那么必有下确界。$\Q$不适用这个原理。</p><p>    <b>定理1.7：</b>$\forall n \in \N, \forall x \in \R, x \ge 0, \exists ! y \ge 0$使得$y^n = x$。</p><p>    <b style="color: red;">定理1.8：</b><b>阿基米德性质</b> $\forall x &gt; 0, y \in \R, \exists n \in \N$使得$nx > y$。</p><p>    <b>推论1.9：稠密性</b> $\Q$在$\R$中稠密，即$\forall x &lt; y \in \R, \exists q \in \Q$使得$x &lt; q &lt; y$。</p><p>    <b>定理1.10：</b>如果$S \subset \R$，并且$S$有上界，令$M = \sup S$，那么有$\forall \varepsilon > 0, \exists x \in S$使得$M - \varepsilon &lt; x &lt; M$。</p><p>    <b>定理1.11：（三角不等式）</b>$|x+y| \le |x| + |y|$。$\big ||x|-|y| \big | \le |x-y|$。</p><p>    <b>定理1.12：（康托）</b>$\R$是不可数的。</p><br><br><hr><h3 id="数列"><a href="#数列" class="headerlink" title="数列"></a>数列</h3><p>    <b style="color: red;">定义2.1：</b><b>数列收敛</b> 数列$x_n$趋向于或收敛于$x$的定义为$\forall \varepsilon > 0, \exists N \in \N$使得$|x_n - x| &lt; \varepsilon, \forall n \ge N$。</p><p>    <b>定理2.2：</b>收敛数列有界，并且有且仅有一个极限。</p><p>    <b>技巧2.3：</b>要证明数列不收敛，找到两个子列$\{\overline{x_{n_k}}\}$和$\{\widetilde{x_{n_k}}\}$使得这两个数列收敛于不同极限。</p><p>    <b>推论2.4：</b>$x_n \rightarrow x$的充要条件是任意子列$\{x_{n_k}\}$也都收敛于$x$。</p><p>    <b style="color: red;">定理2.5：</b>单调有界数列必定收敛。如果单调递增，那么$x_n \rightarrow \sup \{x_n\}$；如果单调递减，那么$x_n \rightarrow \inf \{x_n\}$。</p><p>    <b>推论2.6：</b>如果集合$S$有上界，那么存在收敛数列$\{x_n\} \subset S$，并且$x_n \rightarrow \sup S$。</p><p>    <b>命题2.7：</b>假设$x_n \rightarrow x$，$y_n \rightarrow y$。如果$x_n \le y_n$，那么$x \le y$。</p><p>    <b style="color: red;">引理2.8：</b><b>夹逼定理</b> 假设$\{x_n\},\{y_n\},\{z_n\}$满足$x_n \le z_n \le y_n$。如果$x_n \to L$，$y_n \to L$，那么$z_n$也收敛于$L$。</p><p>    <b style="color: red;">定理2.9：</b><b>比较审敛法</b> 令$a_n \ge 0$并且$a_n \to 0$。如果$\{x_n\}$对于足够大的$n$有$|x_n - x| \le a_n$，那么$\{x_n\}$收敛于$x$。</p><p>    <b>命题2.10：</b>如果$x_n$无界并且单调递增/递减，那么$x_n \to \infty$或$x_n \to -\infty$。</p><p>    <b style="color: red;">定理2.11：</b><b>比值审敛法</b> 对数列$\{x_n\}$，如果</p><ol>    <li>        $\displaystyle \lim_{n\to \infty} \frac{|x_{n+1}|}{|x_n|} &lt; 1$，那么$x_n \to 0$。    </li>    <li>        $\displaystyle \lim_{n\to \infty} \frac{|x_{n+1}|}{|x_n|} &gt; 1$，那么$x_n$发散。    </li>    <li>        $\displaystyle \lim_{n\to \infty} \frac{|x_{n+1}|}{|x_n|} = 1$，那么收敛性不确定。    </li></ol><p>    <b style="color: red;">定理2.12：</b><b>BW</b> 所有在$\R$中的有界数列都有收敛子列。</p><p>    <b>定理2.13：</b>如果数列$\{x_n\}$收敛，那么存在子列$\{\overline{x}_{n_k}\}$使得$\displaystyle \lim_{n \to \infty} \overline{x}_{n_k} = \limsup_{n \to \infty} x_n$。同样，也存在子列$\{\widetilde{x}_{n_k}\}$使得$\displaystyle \lim_{n \to \infty} \widetilde{x}_{n_k} = \liminf_{n \to \infty} x_n$。</p><p>    <b>推论2.14：</b>如果$\{x_n\}$有界，那么$\{x_n\}$收敛的充要条件是$\liminf x_n = \limsup x_n$。</p><p>    <b style="color: red;">定义2.15：</b><b>柯西数列</b> $\{x_n\}$是柯西数列，如果$\forall \varepsilon > 0, \exists N \in \N$使得$\forall n \ge N$和$m \ge N$，有$|x_n - x_m| &lt; \varepsilon$。</p><p>    <b>定理2.16：</b>所有$\R$上的柯西数列都收敛。</p><p>    <b style="color: red;">定义2.17：</b><b>级数收敛</b> 级数$\Sigma x_n$收敛的充要条件是部分和$\displaystyle S_n = \sum_{k=1}^n x_k$是收敛数列。</p><p>    <b>定理2.18：p级数</b> p级数$x_n = n^{-p}, p > 1$收敛。调和级数$\displaystyle \sum \frac{1}{n}$发散。</p><p>    <b style="color: red;">定理2.19：</b>如果$\Sigma x_n$收敛，那么$|x_n| \to 0$。如果$|x_n| \not \to 0$，那么$\Sigma x_n$发散。</p><p>    <b>定理2.20：</b>如果级数绝对收敛，那么级数收敛。</p><p>    <b style="color: red;">定理2.21：</b><b>交错级数审敛法</b> 如果$x_n \ge 0$并且$x_n$单调递减，$x_n \to 0$，那么$\Sigma (-1)^n x_n$收敛。</p><p>    <b style="color: red;">定理2.22：</b><b>级数比值审敛法</b> 如果$x_n$是非零数列并且极限$\displaystyle L = \lim_{n \to \infty} \frac{|x_{n+1}|}{|x_n|}$存在，那么如果$L &lt; 1$，那么级数绝对收敛；如果$L > 1$，级数发散。</p><p>    <b style="color: red;">定理2.23：</b><b>级数开根审敛法</b> 假设极限$L = \limsup \sqrt[n]{|x_n|}$存在。那么如果$L &lt; 1$，级数$\Sigma x_n$绝对收敛；如果$L>1$，那么级数发散。</p><p>    <b style="color: red;">定理2.24：</b><b>幂级数</b> 幂级数$\Sigma a_n (x-x_0)^n$有收敛半径$\displaystyle R = \frac{1}{\displaystyle \limsup_{n \to \infty} \sqrt[n]{|a_n|}}$。如果存在，那么当$|x - x_0| &lt; R$时，级数绝对收敛；如果$|x-x_0| > R$，那么级数发散。等于的情况需要另行讨论。</p><p>    <b>定理2.25：级数极限比较审敛法</b> 如果有$a_n \gt 0, b_n \gt 0$并且$\displaystyle 0 \lt \lim_{n \to \infty} \frac{a_n}{b_n} \lt \infty$，那么$\Sigma a_n$和$\Sigma b_n$同时收敛或发散。</p><br><br><hr><h3 id="连续函数"><a href="#连续函数" class="headerlink" title="连续函数"></a>连续函数</h3><p>    <b style="color: red;">定义3.1：</b><b>聚点</b> 设$S \subset \R$。$x \in \R$是$S$的一个聚点，如果$\forall \varepsilon > 0$，集合$(x-\varepsilon, x+\varepsilon) \cap S \backslash \{x\}$非空。</p><p>    <b>定理3.2：</b>$x$是$S$的聚点的充要条件是$\exists \{x_n\} \subset S \backslash \{x\}$使得$\displaystyle \lim_{n \to \infty} x_n = x$。</p><p>    <b style="color: red;">定义3.3：</b><b>函数极限</b> 设函数$f: S \to \R$。令$c \in \R$为$S$的一个聚点。如果有$\forall \varepsilon > 0, \exists \delta > 0$使得对所有的$|x-c| &lt; \delta, x \in S$都有$|f(x) - L| &lt; \varepsilon$，那么定义函数极限$\displaystyle L = \lim_{x \to c} f(x)$。注意，如果$L$存在，那么它唯一。</p><p>    <b style="color: red;">定理3.4：</b>设$f:S \to \R$，$c$是$S$的一个聚点。那么$\displaystyle \lim_{x \to c} f(x) = L$的充要条件是$\forall \{x_n\} \subset S \backslash \{x\}$并且$x_n \to c$，都有$\displaystyle \lim_{n \to \infty} f(x_n) = L$。</p><p>    <b>定理3.5：</b>函数极限存在的充要条件是双侧极限存在且相等。</p><p>    <b style="color: red;">定义3.6：</b><b>连续性</b> 对于函数$f:S \to \R, c \in S$，如果有$\forall \varepsilon > 0, \exists \delta = \delta(\varepsilon, c) > 0$使得$\forall x \in S, |x - c| &lt; \delta$都有$|f(x) - f(c)| &lt; \varepsilon$，那么$f$在$c$连续。如果对所有$c \in S$，$f$都连续，那么我们说$f$在$S$上连续。</p><p>    <b style="color: red;">定理3.7：</b>$f$在$c$连续的充要条件是$\forall x_n \to c, x_n \in S$，都有$f(x_n) \to f(c)$。</p><p>    <b>推论3.8：</b>$f(x) = x^r, r \in \Q$是连续的。</p><p>    <b>定理3.9：</b>若有$f: A \to B, g: B \to \R$，并且$f$在$c$连续，$g$在$f(c)$连续，那么复合函数$h = g \circ f : A \to \R$在$c$连续（$h(x) = g(f(x))$）。</p><p>    <b style="color: red;">定理3.10：</b>如果存在数列$\{x_n\} \subset S$，$x_n \to c$但是$f(x_n) \not \to c$，那么$f$在$c$不连续。</p><p>    <b style="color: red;">定理3.11：</b><b>最大最小值定理</b> 如果$f: [a,b] \to \R$是连续的，那么$f$有界，并且在$[a,b]$上有最大最小值。</p><p>    <b style="color: red;">引理3.12：</b><b>零点定理</b> 如果$f: [a,b] \to \R$是连续的，并且$f(a) &lt; 0$，$f(b) > 0$，那么存在$c \in (a,b)$使得$f(c) = 0$。</p><p>    <b style="color: red;">定理3.13：</b><b>介值定理，中间值定理</b> 如果$f:[a,b] \to \R$连续，并且存在$y$在$f(a)$和$f(b)$之间，那么存在$x_0 \in (a,b)$使得$f(x_0) = y$。</p><p>    <b>推论3.14：</b>如果$f: [a,b] \to \R$是连续的，那么$f([a,b]) = [\inf f, \sup f]$。</p><p>    <b>推论3.15：</b>所有奇数次多项式都有一个实根。</p><p>    <b style="color: red;">定义3.16：</b><b>一致连续性</b> $f$在$S$上一致连续的定义是$\forall \varepsilon > 0, \exists \delta = \delta(\varepsilon) > 0$使得$\forall |x - y| &lt; \delta$都有$|f(x) - f(y)| &lt; \varepsilon$。</p><p>    <b>定理3.17：</b>一致连续的函数是连续的。</p><p>    <b>定理3.18：</b>如果$f:[a,b] \to \R$连续，那么$f$在$[a,b]$上一致连续。</p><p>    <b>定理3.19：</b>如果$\{x_n\} \subset S$是柯西数列，并且$f$在$S$上一致连续，那么$\{f(x_n)\}$也是柯西数列。</p><p>    <b>定理3.20：</b>一致连续性的推广略。（暂时）</p><p>    <b style="color: red;">定义3.21：</b><b>利普希茨连续</b> 如果对于函数$f: S \to \R$，存在$M > 0$使得对于任意的$x,y \in S$，都有$|f(x) - f(y)| \le M |x-y|$，那么函数$f$是Lipschitz连续的。</p><p>    <b>定理3.22：</b>Lipschitz连续函数是一致连续的。</p><p>    <b style="color: red;">定义3.23：</b><b>单调性</b> 如果$f$满足$x \lt y \Rightarrow f(x) \le f(y)$，那么$f$是单调递增的。如果$f$满足$x \lt y \Rightarrow f(x) \ge f(y)$，那么$f$是单调递减的。严格递增递减是将等号去除的情况。</p><p>    <b>定理3.24：</b>如果$I \subset \R$是一个区间，并且$f: I \to \R$是严格单调的，那么$f(I)$是一个区间的充要条件是$f$是连续的。</p><p>    <b>定理3.25：</b>如果$f: I \to \R$是单调的，那么$f$有最多可数无穷个间断点（不连续点）。</p><br><br><hr><h3 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h3><p>    <b style="color: red;">定义4.1：</b><b>导数</b> 若函数$f:I \to \R$，$c \in I$是一个聚点。如果极限$\displaystyle L = \lim_{x \to c} \frac{f(x) - f(c)}{x-c}$存在，那么我们称$f$在$c$可导，并且$L$叫做$f$在$c$的导数，记作$f'(c) = L$。</p><p>    <b>定理4.2：</b>可导必连续。</p><p>    <b>定理4.3：链式法则</b> 若$f:I_1 \to I_2$在$c \in I_1$可导，$g:I_2 \to \R$在$f(c) \in I_2$可导，那么$g \circ f: I_1 \to \R$在$c$可导，并且导数$(g \circ f)'(c) = g'(f(c)) \cdot f'(c)$。</p><p>    <b>定理4.4：</b>如果函数$f: I \to \R$在$c$可导，并且在$c$有局部极值，那么$f'(c) = 0$。</p><p>    <b>定义4.5：</b>驻点指导数为$0$的点。</p><p>    <b>定理4.6：</b>假设$f: [a,b) \to \R$是连续的并且在$(a,b)$上可导。如果$\displaystyle \lim_{x \to a^+} f'(x)$存在并等于$L$，那么说$f$在$a$可导，并且$f'(a) = L$。</p><p>    <b style="color: red;">定理4.7：</b><b>罗尔定理</b> 假设$f: [a,b] \to \R$是连续的，并且在$(a,b)$上可导。如果$f(a) = f(b)$，那么存在$c \in (a,b)$使得$f'(c) = 0$。</p><p>    <b style="color: red;">定理4.8：</b><b>中值定理</b> 假设$f: [a,b] \to \R$是连续的，并且在$(a,b)$上可导，那么存在$c \in (a,b)$使得$\displaystyle f'(c) = \frac{f(b) - f(a)}{b-a}$，或$f(b) - f(a) = f'(c)(b-a)$。</p><p>    <b>推论4.9：</b>如果$f'(x) = 0, \forall x$，那么$f$是常值函数。如果$f'(x) \ge 0$，那么$f$单调递增。反之亦然。</p><p>    <b>定理4.10：一阶导数测试</b> 假设$f:(a,b) \to \R$在$(a,b) \backslash \{c\}, c \in (a,b)$上是连续并可导的。如果在$(a,c)$上$f'(x) \le 0$，并且在$(c,b)$上$f'(x) \ge 0$，那么$f$在$c$有最小值。反之亦然。</p><p>    <b style="color: red;">定理4.11：</b><b>洛必达法则</b> 假设$f,g:(a,b) \to \R$是可导的，$c \in (a,b)$。如果$f(c) = g(c) = 0, g'(x) \ne 0$，并且极限$\displaystyle L = \lim_{x \to c} \frac{f'(x)}{g'(x)}$存在，那么$\displaystyle \lim_{x \to c} \frac{f(x)}{g(x)} = L$。</p><p>    <b style="color: red;">定理4.12：</b><b>达布中值定理</b> 假设$f:[a,b] \to \R$是可导的。如果有$y$在$f'(a)$和$f'(b)$之间，那么存在$c \in (a,b)$使得$f'(c) = y$。</p><p>    <b style="color: red;">定理4.13：</b><b>泰勒展开</b> 假设$f:[a,b] \to \R$是$n$阶连续可导的并且$n+1$阶导数存在。给定$x_0 \in [a,b]$，对任意$x \ne x_0 \in [a,b]$，存在$c \in (a,b)$在$x$与$x_0$之间，使得    \[f(x) = P_n^{x_0}(x) + R_n^{x_0}(x),\]    其中$\displaystyle P_n^{x_0}(x) = \sum_{k=0}^n \frac{f^{(k)}(x_0)}{k!} (x-x_0)^k$称为泰勒多项式，$\displaystyle R_n^{x_0}(x) = \frac{f^{(n+1)}(c)}{(n+1)!} (x-x_0)^{n+1}$称为拉格朗日余项。</p><p>    <b>定理4.14：二阶导数测试</b> 假设$f$在$(a,b)$上有二阶连续导数，并且$x_0 \in (a,b)$是一个驻点，即$f'(x_0) = 0$。如果$f''(x_0) \gt 0$，那么$f$在$x_0$是局部最小值。反之亦然。</p><br><br><hr><h3 id="黎曼积分"><a href="#黎曼积分" class="headerlink" title="黎曼积分"></a>黎曼积分</h3><p>    <b>定义5.1：划分</b> 如果有$a = x_0 \lt x_1 \lt ... \lt x_n = b$，那么称$P = \{x_0, x_1, ..., x_n\}$是在区间$[a,b]$上的一个划分，并且，记$\Delta x_i = x_i - x_{i-1}$。对于一个在这个划分上的函数$f(x)$，记$\displaystyle m_i = \inf_{[x_{i-1}, x_i]} f(x)$，$\displaystyle M_i = \sup_{[x_{i-1}, x_i]} f(x)$。</p><p>    <b>定义5.2：上下达布和</b> 对于一个划分$P$，定义上达布和$\displaystyle U(P, f) = \sum_{i=1}^n M_i \Delta x_i$，和下达布和$\displaystyle L(P, f) = \sum_{i=1}^n m_i \Delta x_i$。</p><p>    <b>定义5.3：上下积分</b> 设$P$为划分，定义上积分$\displaystyle \overline{\int^b_a} f = \inf_P U(P, f)$，下积分$\displaystyle \underline {\int^b_a} f = \sup_P L(P, f)$。</p><p>    <b style="color: red;">定义5.4：</b><b>黎曼可积</b> 函数$f: [a,b] \to \R$是黎曼可积的，如果$f$有界并且$\displaystyle \overline {\int^b_a} f = \underline {\int^b_a} f = \int^b_a f$。我们称$\displaystyle \int^b_a f$为黎曼积分，并且记$\displaystyle \int^b_a f = \int^b_a f(x) dx$。如果$f$在$[a,b]$上黎曼可积，记作$f \in \mathscr{R} [a,b]$。</p><p>    <b style="color: red;">定理5.5：</b> $f:[a,b] \to \R$是黎曼可积的充要条件是对于任意$\varepsilon > 0$，存在一个划分$P$使得$0 \le U(P, f) - L(P, f) \lt \varepsilon$。</p><p>    <b>定义5.6：Refinement</b> 我们称$\widetilde P$是划分$P$的Refinement，如果$P \subset \widetilde P$。</p><p>    <b>推论5.7：</b> 假设$P_1$和$P_2$是在$[a,b]$上的划分，那么$P = P_1 \cup P_2$是$P_1$和$P_2$的Refinement，并且有$L(P_1,f) \le L(P,f) \le U(P,f) \le U(P_2,f)$。</p><p>    <b>命题5.8：</b> 如果$m \le M$，那么$m(b-a) \le L(P,f) \le U(P,f) \le M(b-a)$。</p><p>    <b style="color: red;">定理5.9：</b> 如果$f:[a,b] \to \R$是连续的，那么它是黎曼可积的。</p><p>    <b>推论5.10：</b> 假设$f$是连续的并且$f \ge 0$。如果$\int_a^b f = 0$，那么$f(x) = 0, \forall x$。</p><p>    <b style="color: red;">定理5.11：</b> 如果$f:[a,b] \to \R$是单调的，那么$f$是黎曼可积的。</p><p>    <b>定理5.12：</b> 假设$f:[a,b] \to \R$有界并且数列$a_n$单调递减，$a_n \to a$，数列$b_n$单调递增并且$b_n \to b$。如果对于所有的$n \in \N$，$f$在$[a_n, b_n]$是黎曼可积的，那么$f$在$[a,b]$上是黎曼可积的，并且$\displaystyle \int^b_a f = \lim_{n \to \infty} \int^{b_n}_{a_n} f$。</p><p>    <b>定理5.13：</b> 如果$f$有界并且$f$有有限个间断点，那么$f$是黎曼可积的。</p><p>    <b style="color: red;">定理5.14：微积分基本定理1 牛顿-莱布尼茨公式</b> 假设$F$在$[a,b]$上连续，并且在$(a,b)$上可导，令$f = F'$。如果$f \in \mathscr R[a,b]$，那么$\displaystyle \int^b_a f = F(b) - F(a)$。</p><p>    <b style="color: red;">定理5.15：微积分基本定理2</b> 假设$f \in \mathscr R [a,b]$，并且$x \in [a,b]$。定义$\displaystyle F(x) = \int^x_a f$，那么$F$在$[a,b]$上连续。如果$f \in C^0[a,b]$（$C^n[a,b]$指$n$阶连续可导），那么$F$在$[a,b]$上可导，并且$F'(c) = f(c)$。</p><p>    <b>定理5.16：换元法</b> 假设$g \in C^1[a,b]$，并且$g([a,b]) \subset [c,d]$，令$f \in C^0 [c,d]$，那么有$\displaystyle \int^b_a f(g(x)) g'(x) dx = \int^{g(b)}_{g(a)} f(s) ds$。</p><p>    <b>定理5.17：自然对数函数</b> 存在唯一的函数$L: (0, +\infty) \to \R$，并且有以下性质：</p><ol>    <li>        $L(1) = 0$；    </li>    <li>        $\displaystyle L'(x) = \frac{1}{x}$；    </li>    <li>        $L$是严格单调递增并且是双射，并且有$\displaystyle \lim_{x \to 0^+} L(x) = -\infty$，$\displaystyle \lim_{x \to \infty} L(x) = +\infty$；    </li>    <li>        $L(xy) = L(x) + L(y)$；    </li>    <li>        对于任意$q \in \Q$，有$L(x^q) = qL(x)$。    </li></ol><p>    函数$L$又能记作$\ln(x)$或$\log(x)$。</p><p>    <b>定理5.18：自然对数函数幂级数展开</b> $\displaystyle \ln(x+1) = \sum_{k = 1}^\infty \frac{x^k}{k!}(-1)^{k-1}$。 </p><p>    <b>定理5.19：自然指数函数</b> 存在唯一的函数$E: \R \to (0, +\infty)$，并且有以下性质：</p><ol>    <li>        $E(0) = 1$；    </li>    <li>        $E$是双射，严格递增，并且$\displaystyle \lim_{x \to -\infty} E(x) = 0$，$\displaystyle \lim_{x \to \infty} E(x) = +\infty$；    </li>    <li>        $E(x+y) = E(x)E(y)$；    </li>    <li>        对于任意$q \in \Q$，$E(qx) = E(x)^q$。    </li></ol><p>    函数$E$又能记作$\exp(x)$。</p><p>    <b>定义5.20：自然常数</b> 欧拉常数$e = E(1)$。并且，令$E(x) = e^x = exp(x)$等价。</p><p>    <b>定义5.21：</b> 对于任意$x>0$和$y \in \R$，定义$x^y = \exp(y \ln x)$。</p><p>    <b>定理5.22：自然指数函数幂级数展开</b> $\displaystyle e^x = \sum^\infty_{k = 0} \frac{x^k}{k!}$。</p><p>    <b>定义5.23：反常积分</b> 假设$f$在所有$c \in (a,b)$黎曼可积，并且$\displaystyle \lim_{c \to b^-} \int^c_a f$存在，那么定义反常积分$\displaystyle \int^b_a f = \lim_{c \to b^-} \int^c_a f$。</p><p>    <b>定理5.24：反常积分的p级数审敛法</b> </p><ol>    <li>        若$p \gt 1$，那么$\displaystyle \int^\infty_1 \frac{1}{x^p} dx = \frac{1}{p-1}$。    </li>    <li>        若$p \lt 1$，那么$\displaystyle \int^1_0 \frac{1}{x^p} dx = \frac{1}{1-p}$。    </li></ol><p>    <b style="color: red;">定理5.25：积分比较审敛法</b> 若$f: [a,\infty) \to \R, g : [a, \infty) \to \R$，并且对于任意的$x$，都有$|f(x)| \le g(x)$，那么</p><ol>    <li>        如果$\int^\infty_a g$存在，那么$\int^\infty_a f$也存在，并且$| \int^\infty_a f | \le \int^\infty_a g$。    </li>    <li>        如果$\int^\infty_a f$发散，那么$\int^\infty_a g$也发散。    </li></ol><p>    <b>定理5.26：级数的积分审敛法</b> 假设$f: [k, +\infty) \to \R$非负并且单调递减。那么，$\displaystyle \sum_{n \ge k} f(n)$收敛的充要条件是$\displaystyle \int^\infty_k f$收敛，并且如果$\displaystyle \int^\infty_k f \le \infty$，有$\displaystyle \int^\infty_k f \le \sum_{n \ge k} f(n) \le f(k) + \int^\infty_k f$。</p><br><br><hr><h3 id="函数列"><a href="#函数列" class="headerlink" title="函数列"></a>函数列</h3><p>    <b>定义6.1：点收敛</b> 假设有函数列$\{f_n\}_{n \ge 1} : S \to \R$。如果对于$f: S \to \R$，有对任意的$x \in S$，$\displaystyle \lim_{n \to \infty} f_n(x) = f(x)$，那么称$\{f_n\}$点收敛于$f$。</p><p>    <b>定义6.2：一致收敛</b> 函数列$\{f_n\}$一致收敛于$f$，如果对于任意的$\varepsilon > 0$，都存在$N \in \N$，使得对任意的$n \ge N$和$x \in S$，有$|f_n(x) - f(x)| \lt \varepsilon$。</p><p>    <b>定义6.3：一致范数</b> 假设$f: S \to \R$有界，定义$f$在$S$上的一致范数为$\displaystyle \|f\|_u = \|f\|_{L^\infty(S)} = \sup_{x \in S} |f(x)|$。</p><p>    <b style="color: red;">定理6.4：一致收敛</b> 函数列$\{f_n\}$一致收敛于$f$的充要条件是$\displaystyle \lim_{n \to \infty} \|f_n - f\|_u = 0$。</p><p>    <b>性质6.5：</b> $\|f+g\|_u \le \|f\|_u + \|g\|_u$。</p><p>    <b>推论6.6：</b> 如果$\{f_n\}$在$S$上一致收敛于$f$，那么$f_n$在$S$上点收敛于$f$。</p><p>    <b>定义6.7：一致柯西收敛</b> 如果有界函数列$f_n: S \to \R$有$\forall \varepsilon \gt 0, \exists N$使得对任意的$n, m \ge N$，$\|f_n - f_m\|_u \lt \varepsilon$，那么称$\{f_n\}$在$S$上一致柯西收敛。</p><p>    <b>推论6.8：</b> 函数列一致柯西收敛的充要条件是函数列一致收敛。</p><p>    <b>定理6.9：</b> 假设连续有界函数列$f_n: S \to \R$在$S$上一致收敛于$f$，那么$f$也是连续且有界的。</p><p>    <b style="color: red;">定理6.10：</b> 假设$f_n \in \mathscr R[a,b]$，并且$f_n$在$[a,b]$上一致收敛于$f$，那么$f \in \mathscr R[a,b]$，并且$\displaystyle \lim_{n \to \infty} \int^b_a f_n = \int^b_a f$。</p><p>    <b style="color: red;">定理6.11：</b> 假设存在有界区间$I$，并且$f_n \in C^1(I)$，那么如果</p><ol>    <li>        存在$c \in I$使得$f_n(c)$收敛于某个数，    </li>    <li>        存在$g \in C^1(I)$使得$f_n' \to g$在$I$上一致收敛，    </li></ol><p>    那么存在$f \in C^1(I)$，并且$f' = g$，使得$f_n$在$I$上一致收敛于$f$。</p><p>    <b>定理6.12：幂级数</b></p><br><br><hr><h3 id="度量空间"><a href="#度量空间" class="headerlink" title="度量空间"></a>度量空间</h3><p>    <b>定义7.1：</b> 定义度量空间$(X,d)$，其中$X$是集合，映射$d: X \times X \to [0, +\infty)$称作度量，并且满足</p><ol>    <li>        <b>正定性：</b> $d(x,y) \ge 0$，并且当且仅当$x=y$时$d(x,y) = 0$。    </li>    <li>        <b>对称性：</b> $d(x,y) = d(y,x)$。    </li>    <li>        <b>三角不等式：</b> $d(x,y) \le d(x, z) + d(z, y)$。    </li></ol><p>    <b style="color: red;">定理7.2：柯西施瓦茨不等式</b> 假设向量$\boldsymbol a, \boldsymbol b \in \R^n$，那么$\boldsymbol a \cdot \boldsymbol b \le \|\boldsymbol a\| \|\boldsymbol b\|$。</p><p>    <b>定义7.3：有界性</b> 非空度量空间$S \subset (X,d)$有界的定义是存在$p \in X$和$M \gt 0$使得对任意的$x \in S$，都有$d(p, x) \le M$。定义半径$\text{diam}(S) = \sup \{d(x,y): x,y \in S\}$。</p><p>    <b>定理7.4：</b> $S \ne \emptyset$有界的充要条件是$\text{diam}(S) \lt \infty$。</p><p>    <b>定义7.5：开球与闭球</b> 开球$B(x,r) = \{y \in X: d(x,y) \lt r\}$。闭球$C(x,r) = \{y \in X: d(x,y) \le r\}$。</p><p>    <b>定义7.6：开、闭集</b> 集合$A \subset (X,d)$是开集，如果$\forall x \in A, \exists \varepsilon > 0$使得$B(x,\varepsilon) \subset A$。如果$A^C$是开集，那么称$A$是闭集。</p><p>    <b>推论7.7：</b> 对于度量空间$(X,d)$，</p><ol>    <li>        $\emptyset$和$X$是闭开集，即又开又闭的集合。    </li>    <li>        任意开集的并集是开集。    </li>    <li>        有限个开集的交集是开集。    </li>    <li>        有限个闭集的并集是闭集。    </li>    <li>        任意闭集的交集是闭集。    </li></ol><p>    <b>定理7.8：</b> 在度量空间$(X,d)$中，开球$B(x, \varepsilon)$是开集，闭球$C(x,\varepsilon)$是闭集。</p><p>    <b>定义7.9：闭包（Closure）</b> 定义集合$A \subset (X,d)$的闭包为包含$A$的最小闭集，即$\overline{A} = \cap_{F \text{ closed, } F \subset A} F$。 </p><p>    <b>性质7.10：闭包的性质</b></p><ol>    <li>        $A \subset \overline A$。    </li>    <li>        $\overline A$是闭集。    </li>    <li>        $A$是闭集当且仅当$A = \overline A$。    </li>    <li>        $x \in \overline A$当且仅当$\forall \varepsilon > 0, B(x, \varepsilon) \cap A \ne \emptyset$。    </li></ol><p>    <b>定义7.11：内部（Interior）</b> 定义集合$A$的内部为$A$的最大开子集，即$A^\circ = \cup_{E \text{ open, } E \subset A} E$。</p><p>    <b>性质7.12：内部的性质</b></p><ol>    <li>        $A^\circ \subset A$。    </li>    <li>        $A^\circ$是开集。    </li>    <li>        $A$是开集当且仅当$A = A^\circ$。    </li>    <li>        $x \in A^\circ$当且仅当$\exists \varepsilon > 0$使得$B(x,\varepsilon) \subset A$。    </li></ol><p>    <b>定义7.13：边界</b> 集合$A$的边界是$\partial A = \overline A \backslash A^\circ$。</p><p>    <b>推论7.14：</b> $x \in \partial A$的充要条件是$\forall \varepsilon > 0, B(x, \varepsilon) \cap A \ne \emptyset$并且$B(x,\varepsilon) \cap A^C \ne \emptyset$。</p><p>    <b>定义7.15：连通集</b> 如果非空度量空间$(X, d)$的闭开子集只有$\emptyset$和$X$自身，那么称它为连通集。</p><p>    <b>定义7.16：不连通集</b> 在度量空间$(X,d)$中，假设$S \subset X$。如果在$X$中存在开集$U_1$和$U_2$，使得$U_1 \cap U_2 \cap S = \emptyset$，$U_1 \cap S \ne \emptyset$，$U_2 \cap S \ne \emptyset$，并且$S = (U_1 \cap S) \cup (U_2 \cap S)$，那么称$S$为不连通集。</p><p>    <b>定义7.17：子空间</b> 令$Y \subset X$使得$(Y,d)$是$(X,d)$的子空间。那么，$U$在$(Y,d)$中是开集的充要条件是存在开集$V \subset (X,d)$使得$U = V \cap Y$。</p><p>    <b>定义7.18：开覆盖</b> 集合$K \subset X$的一个开覆盖是对任意开集$U_\lambda$，$\displaystyle U = \{U_\lambda : K \subset \bigcup_\lambda U_\lambda\}$。</p><p>    <b>定义7.19：紧致集</b> 若集合$K \subset X$的任意开覆盖存在有限子覆盖，则称$K$是紧致集，或紧集。即，存在有限集合$\{\lambda_1, \lambda_2, ..., \lambda_k\}$使得$K \subset \bigcup^k_{i = 1} U_{\lambda_i}$。</p><p>    <b>定理7.20：（A）</b> 紧致集是有界闭集。</p><p>    <b>定理7.20：（B）数列紧致</b> $K \subset (X,d)$是紧致集的充要条件是对于任意的$\{x_n\} \subset K$，存在$\{x_{n_i}\} \subset \{x_n\}$使得$x_{n_i}$收敛于$x \in K$。</p><p>    <b>定理7.20：（C）</b> 如果$K$是紧致的，并且$E$是闭集，那么$K \cap E$是紧致的。</p><p>    <b>定理7.20：（D）海涅-博雷尔定理</b> 集合$K \subset \R^n$是紧致集的充要条件是$K$是有界闭集。</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
          <category> Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GNU/Linux Introduction Chapter 2</title>
      <link href="/programming/linux/tutorial/2-files/"/>
      <url>/programming/linux/tutorial/2-files/</url>
      
        <content type="html"><![CDATA[<div align="center" style="font-size: 33px"><b>    Chapter 2: Files</b></div><h2 id="File-Formats"><a href="#File-Formats" class="headerlink" title="File Formats"></a>File Formats</h2><p>Well I have to say that there is actually no such things called “format” for Linux. For Linux, it’s all about if it can be executed or not. Life is easier for Windows, as most executables in Linux have no file extension.</p><p>You <strong>are</strong> able to execute any file in Linux, and the OS will decide if it is executable or not. In Linux, the most common executable file format is the Executable and Linkable Format, <strong>ELF</strong>. Let’s take the hexdump of <code>gcc</code> for example.</p><pre class="line-numbers language-none"><code class="language-none">  Offset: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 00000000: 7F 45 4C 46 02 01 01 00 00 00 00 00 00 00 00 00    .ELF............00000010: 02 00 3E 00 01 00 00 00 60 6F 40 00 00 00 00 00    ..&gt;.....&#96;o@.....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The first 16 bytes are the magic header of ELF executables, and you can see the <code>ELF</code> ASCII characters from bytes 1 to 3. The OS will use the Magic to identify if it is an executable or not. Also, text files are executable. They can be used to execute shell commands, and we will talk about that later.</p><p>Anyways, to execute a file, you have to change the permission of the file first, and we have to know what file permissions are, and what the hell does <code>ls -la</code> really tell us.</p><h2 id="File-Permission"><a href="#File-Permission" class="headerlink" title="File Permission"></a>File Permission</h2><p>Remember the output from <code>ls -la</code>? If not, just run the same command again. Your output will be similar to something like</p><pre class="line-numbers language-none"><code class="language-none">total 12drwxr-xr-x  3 root    root    4096 Aug  4 21:23 .drwxr-xr-x 20 root    root    4096 Aug  5 20:08 ..drwxr-xr-x 21 rebuild rebuild 4096 Sep 25 20:15 rebuild<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Forget about the first line <code>total 12</code> for now. It is related to some OS knowledge on the file system. Now, we shall really focus on understanding the other lines describing the details for those files and directories. It is really easy to understand the last 4 columns representing month, day, time of modification, and the name of that file. The 5<sup>th</sup> column represents the size of the file, in bytes. Here, each directory is a file that takes up 4 KiB of the disk (or memory) space.</p><blockquote><p>Note: I add “memory” because directories such as <code>.</code> and <code>..</code> may not really exist on disk. They might be put in memory and used by OS directly from memory. The size of a directory will always be 4 KiB because the file representing a directory contains metadata about the files in that directory (inodes and file names). The smallest size for a block in the disk is 4 KiB, so directories will take up 4 KiB initially. However, if there are too much contents in that directory, the size of the directory file will grow large. I created a directory with 10,000 files inside using <code>touch &#123;1..10000&#125;</code>, and that directory is of size 155648 bytes, or 152 KiB. That is exactly 38 blocks.</p></blockquote><p>Now let’s check the first column, that is, the <strong>permissions</strong> of the file. It is represented here in <code>ls</code> by the 10 characters, e.g. <code>drwxr-xr-x</code>. When we want to understand this, we have to seperate it into 1-3-3-3, that is, <code>d rwx r-x r-x</code>.</p><p>The first character, <code>d</code>, indicates that this file is a directory. Other valid options are</p><ul><li><code>-</code>, meaning a regular file</li><li><code>l</code>, meaning a <strong>symbolic link</strong></li><li><code>c</code>, meaning <strong>character device</strong></li><li>Others we don’t care about for now<sup><a href="#Notes-and-References">1</a></sup>.</li></ul><p>Well that’s easy. Now come tricky stuffs. The <strong>real</strong> permissions for files and directories. </p><h3 id="File-Permissions"><a href="#File-Permissions" class="headerlink" title="File Permissions"></a>File Permissions</h3><p>The permissions of a file are represented in <code>ls</code> by the latter 3 groups consisting of 3 characters, such as <code>rwx</code>. They are indicative of <strong>read</strong>, <strong>write</strong>, and <strong>execute</strong> permissions, respectively. If the character is <code>-</code>, it means that the specific permission is denied. And for the meaning of the 3 groups, see the table below.</p><table style="table-layout: fixed;">    <thead>        <tr>            <th colspan=3><div align="center">File's owner<div></th>            <th colspan=3><div align="center">Other people in file's group<div></th>            <th colspan=3><div align="center">Anyone else<div></th>        </tr>    </thead>    <tbody>        <tr>            <td align="center">r</td>            <td align="center">w</td>            <td align="center">x</td>            <td align="center">r</td>            <td align="center">w</td>            <td align="center">x</td>            <td align="center">r</td>            <td align="center">w</td>            <td align="center">x</td>        </tr>    </tbody></table><p>Usually, a file’s owner is in the file’s group. The two information can be seen from the 3<sup>rd</sup> and 4<sup>th</sup> column of the output of <code>ls -l</code>. </p><table><thead><tr><th>Character</th><th>Meaning</th></tr></thead><tbody><tr><td><code>r</code></td><td>Read file</td></tr><tr><td><code>w</code></td><td>Write to file</td></tr><tr><td><code>x</code></td><td>Execute file</td></tr><tr><td><code>-</code></td><td>No permission</td></tr></tbody></table><p>Note that the <code>root</code> user in Linux has the highest privilege, so <code>root</code> can execute any command and do whatever it want on any files regardless of the file permission.</p><h3 id="Directory-Permissions"><a href="#Directory-Permissions" class="headerlink" title="Directory Permissions"></a>Directory Permissions</h3><p>Similar to file permissions, the latter 3 groups for directory permissions also consists of <code>rwx</code>, and the first character in <code>ls -l</code> will always be <code>d</code>. However, here the meaning is slightly different.</p><table><thead><tr><th>Character</th><th>Meaning</th></tr></thead><tbody><tr><td><code>r</code></td><td>Read directory content using e.g. <code>ls</code></td></tr><tr><td><code>w</code></td><td>Make changes on directory, e.g., creating, moving, deleting</td></tr><tr><td><code>x</code></td><td>Go into directory using <code>cd</code></td></tr><tr><td><code>-</code></td><td>No permission</td></tr></tbody></table><p>There are, though, other permission types. For the “anyone else” group, there is the sticky bit, <code>T</code> and <code>t</code>. Also there are the <code>setuid</code> and <code>setgid</code> bit, <code>S</code> and <code>s</code>. I will not talk about them here.<sup><a href="#Notes-and-References">2</a></sup></p><h3 id="Octet-Representation"><a href="#Octet-Representation" class="headerlink" title="Octet Representation"></a>Octet Representation</h3><p>Here we can see that regular file permissions can be represented by 9 flags in 3 groups. Therefore, for each group, we can let the flags be bit flags and form a octet. For example, <code>rwx</code> will be <code>0b111</code> in binary and thus <code>7</code> for this octet; <code>r--</code> will be <code>4</code>, and <code>---</code> will be <code>0</code>. Therefore, combining 3 groups together, we will have 3 octets, and we will use this to change the file permission later. The <code>d</code> character representing if the file is a directory is ignored here because it is more of a “property”, not “permission”, of a file.</p><p>Some examples:</p><pre class="line-numbers language-none"><code class="language-none">drwxrwxr-x  -&gt;  775-rwxr-xr-x  -&gt;  755 (most common)-r--r--r--  -&gt;  444-rwx--x---  -&gt;  710<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Changing-File-Permission"><a href="#Changing-File-Permission" class="headerlink" title="Changing File Permission"></a>Changing File Permission</h2><p>Ignoring the special permissions that we will not cover, only you and <code>root</code> (admins) can change the permission of files owned by you. We need the <code>chmod</code> command, standing for <strong>ch</strong>ange <strong>mod</strong>e, to change the permission of a file.</p><p>First let’s use the octet representation to change the permission. We use the command <code>chmod &lt;permission&gt; &lt;file&gt;</code>. For example, to give full permission to a file, we use <code>chmod 777 &lt;file&gt;</code>. </p><pre class="line-numbers language-none"><code class="language-none">$ ls -la a.py                               # ~&#x2F;test-rw-r--r-- 1 me   me   63 Sep 22 13:18 a.py$ chmod 777 a.py                            # ~&#x2F;test$ ls -la a.py                               # ~&#x2F;test-rwxrwxrwx 1 me   me   63 Sep 22 13:18 a.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Always, you can set the file permission as you want using this way. </p><p>Another way to set permission using <code>chmod</code> is when you want to easily add or delete a permission. We will use this format of the command: <code>chmod [ugoa...][+-=][perms...] &lt;file&gt;</code>, which is called a symbolic format. First, let’s look at the <code>[ugoa]</code> part. It controls which groups of permission are to be changed.</p><ul><li><code>u</code> stands for the first group, which is the current user.</li><li><code>g</code> stands for the second group, which is other users in the file’s group.</li><li><code>o</code> stands for the third group, which is anyone else.</li><li><code>a</code> stands for all three groups.</li></ul><p>Then, the <code>[+-=]</code> part.</p><ul><li><code>+</code> is for adding permissions.</li><li><code>=</code> is for setting permissions.</li><li><code>-</code> is for removing permissions.</li></ul><p>The final part <code>[perms...]</code> is the permission part. You can use the abbreviation <code>rwx</code>, and one or more can be applied. For example,</p><ul><li><code>a+x</code> means adding execute permission to everyone</li><li><code>o-r</code> means removing read permission of people outside the file’s group.</li><li><code>ugo+rwx</code> is the same as <code>a+rwx</code>, or <code>777</code>, which is giving all permissions.</li></ul><h2 id="Notes-and-References"><a href="#Notes-and-References" class="headerlink" title="Notes and References"></a>Notes and References</h2><ol><li>If you want to know more, you can execute <code>info coreutils ls &quot;what information&quot;</code> and refer to the documentation.</li><li>See [1].</li></ol><hr><h6 align="right"><a href="/programming/linux/tutorial/3-io">Next</a> | <a href="/programming/linux/tutorial/preface">Home</a></h6>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GNU/Linux Introduction Chapter 1</title>
      <link href="/programming/linux/tutorial/1-intro/"/>
      <url>/programming/linux/tutorial/1-intro/</url>
      
        <content type="html"><![CDATA[<div align="center" style="font-size: 33px"><b>    Chapter 1: Introduction</b></div><h2 id="The-Ubuntu-Operating-System"><a href="#The-Ubuntu-Operating-System" class="headerlink" title="The Ubuntu Operating System"></a>The Ubuntu Operating System</h2><p>During this course, I will introduce you to the Ubuntu system which is (I think) the widliest used Linux based OS for non-commercial use. However, if you are using Mac OS, it’s fine to just use this OS provided by Apple since the toolset (maybe not provided by GNU I think) are mostly POSIX compliant.</p><p>Installing Linux on Windows could be a troublesome thing, but now Windows provides <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">WSL</a>. If you don’t want WSL, just use a virtual machine (though they both work the same way; the only difference is that a virtual machine provides graphics). If you install a version with graphics (with desktops, etc.), just open the Terminal after you successfully log on the OS.</p><p>For your reference, the latest Ubuntu image could be found on its <a href="https://ubuntu.com/download">website</a>, and for virtual machine holder, I suggest <a href="https://www.virtualbox.org/">Oracle VirtualBox</a> or <a href="https://www.vmware.com/">VMWare</a>.</p><p>If you are in China, please download the <code>.iso</code> image from <a href="http://mirrors.163.com/ubuntu-releases/">Netease</a>.</p><h2 id="The-File-System"><a href="#The-File-System" class="headerlink" title="The File System"></a>The File System</h2><p><strong>The file system in Linux is beautiful.</strong> Someone once asked me how devices are connected to the OS. When thinking about Windows, we don’t really know how to answer this question. Devices are managed by a whole bunch of drivers and softwares in the OS on Windows. However, in Linux, you can have a direct feeling that these devices <strong>are indeed</strong> installed on your PC. Though they are still managed by the Kernel, but <strong>you</strong> as a user is able to see it. </p><p>Take the console for example. The console is an I/O device (actually most devices perform I/O). On Windows you don’t surely know where <code>stdin</code> and <code>stdout</code> come from. On Linux, the console is a file at the location <code>/dev/tty</code> (or the standard streams <code>/dev/&#123;stdin,stdout,stderr&#125;</code>). You can perform input and output on this file <em>just like how you read or write a file</em>. Therefore, learning the file system first in Linux is necessary and important.</p><p>Interestingly enough, you can even check your mouse movement in the console with the help of device files (of course in a system supporting mice). Just open your terminal and input the following command.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cat</span> /dev/input/mice<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Then move your mouse and see what is printed on your terminal. The <code>cat</code> (not dog) command stands for “con<strong>cat</strong>enation”, and you can use it to print out content of a file. The <code>sudo</code> command stands for “<strong>s</strong>uper <strong>u</strong>ser <strong>do</strong>“, and it is used to get the root privilege to run the command. This device file <code>/dev/input/mice</code> is endless since the computer don’t know when you will end moving your mouse, so <code>cat</code> will keep printing (seemingly) random bytes when you move your mouse. More on this later when we talk about I/O.</p><blockquote><p>Note: <span style="color: #6788ea">We will not talk about mounting and other advanced stuff here, only the basic things that will later make you comfortable using Linux or Unix like systems.</span></p></blockquote><p>The file system in Linux works like a tree (called a file system tree). Unlike Windows where you have several disks with their own separate file system (called a file system forest), Linux file system has only exactly one <strong>root</strong> node of the tree (it is a directory), which is <code>/</code>. Everything is the children of <code>/</code>. For example, if you have a file called <code>a.txt</code> under <code>/</code>, you will write its path as <code>/a.txt</code>. On Windows, similarly, if you have a file <code>a.txt</code> under <code>C:\</code>, you will write its path as <code>C:\a.txt</code>. </p><p>If we keep appending paths like this, we call that an <strong>absolute path</strong>. Consider the following structure:</p><pre class="line-numbers language-none"><code class="language-none">            &#x2F;     _______|_______    &#x2F;       |       \  home    a.txt     bin   |               __|__   me             &#x2F;     \    |            gcc     cat.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We can see here that if we want to get the file <code>gcc</code>, we need to use its absolute path <code>/bin/gcc</code>. For <code>.bashrc</code>, it’s <code>/home/me/.bashrc</code>. Similarly, for directories, it’s the same (actually directories themselves are files containing information about the directories!). For example, the absolute path for <code>me</code> is <code>/home/me</code>.</p><p>However to keep a file system structure is not that easy. What if you are in a directory and you want to go to its parent? Is it necessary to use absolute path every time when you only want to access a file in your current path? Here comes the solution. In <strong>every</strong> directory (which is a subtree of in the file system tree), there exist two special directories, <code>.</code> and <code>..</code>. Check this by doing</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -la /home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This commandline will list all items in the directory <code>/home</code>. The <code>ls</code> command stands for “<strong>l</strong>i<strong>s</strong>t contents”. The flags <code>-la</code> mean to list all items with details. This is a useful command. A notice here is that files and directories in Linux are <strong>hidden if the name starts with <code>.</code></strong>. Therefore actually, <code>.</code> and <code>..</code> are hidden directories. Only with the flag <code>-a</code> to <code>ls</code> can we see them. If we use <code>ls -l</code> only, we will not be able to see the hidden files. Following is the output for me.</p><pre class="line-numbers language-none"><code class="language-none">total 12drwxr-xr-x  3 root    root    4096 Aug  4 21:23 .drwxr-xr-x 20 root    root    4096 Aug  5 20:08 ..drwxr-xr-x 21 rebuild rebuild 4096 Sep 25 20:15 rebuild<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>We will talk more about this output later, but our focus now is to see that there are <code>.</code> and <code>..</code>. <code>.</code> points to this directory itself, and <code>..</code> points to the parent directory. It’s a good question that since <code>/</code> has no parent, how can it have the <code>..</code> link? Well, the developers of Linux have decided that <code>..</code> in <code>/</code> also points to itself, and that solves the problem.</p><h2 id="Terminal-and-Shell"><a href="#Terminal-and-Shell" class="headerlink" title="Terminal and Shell"></a>Terminal and Shell</h2><p>It’s really confusing to understand what is a “terminal” and what are “shells”. I found this answer clear and interesting.</p><blockquote><p><strong>Shell</strong> is a program which processes commands and returns output, like <code>bash</code> in Linux.<br><strong>Terminal</strong> is a program that runs a shell, in the past it was a physical device (Before terminals were monitors with keyboards, they were teletypes) and then its concept was transferred into software , like Gnome-Terminal.<sup><a href="#Reference">1</a></sup></p></blockquote><p>Actually there are plenty of shells in Linux, such as the GNU <code>bash</code>, <code>sh</code>, and others like <code>zsh</code>, <code>csh</code>… They basically run executables for you and generates output and return codes. And since you want to see these outputs, you need a terminal to run shells. Actually <code>tty</code> which means a console (basically a terminal) comes from the word <strong>t</strong>ele<strong>ty</strong>pe which is a very very old hardware (screen) that displays the output from the shell. </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="https://askubuntu.com/a/507138">What is the difference between Terminal, Console, Shell, and Command Line?</a></li></ol><hr><h6 align="right"><a href="/programming/linux/tutorial/2-files">Next</a> | <a href="/programming/linux/tutorial/preface">Home</a></h6>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Python Popen Problem</title>
      <link href="/thoughts/python-popen-problem/"/>
      <url>/thoughts/python-popen-problem/</url>
      
        <content type="html"><![CDATA[<p>This is a problem found during my work in some company. I would like to share it and give some solutions or debug processes.</p><h2 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h2><p>The original problem is that a complex testing framework hangs for no reason. In my first step for debugging, I immedialy checked the process tree using <code>pstree -ap &lt;pid&gt;</code>. It shows that the process hang on its <code>ssh</code> subprocess. The command is something like <code>ssh &lt;username&gt;@&lt;ip&gt; command</code> and is just a normal ssh execution command. It should never go on forever, since this command usually needs only 5 seconds.</p><p>It’s hard, but I finally check the code and found the Python script for making this subprocess. The code is as follows.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> subprocess<span class="token comment"># ... code ...</span><span class="token keyword">try</span><span class="token punctuation">:</span>    proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"ssh"</span><span class="token punctuation">,</span> <span class="token string">"&lt;username>@&lt;ip>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;command>"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                            stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">)</span>    proc<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>    output <span class="token operator">=</span> proc<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    retcode <span class="token operator">=</span> proc<span class="token punctuation">.</span>returncode    <span class="token keyword">return</span> retcode<span class="token punctuation">,</span> output<span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token comment"># ... code ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>I tested the code on my machine, and it worked fine! How is it possible! Why will it hang there? Especially since the process is not over, it hangs at the <code>wait</code> call. Why is that?</p><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p>Well it’s easy to guess that the problem in in the output stream. My first guess is that it needs to wait for all output in the <code>PIPE</code> buffer to be cleared, but since the code works on other places, this seems to be implausible. I decided to check explicitly for the buffer.</p><p>Fortunately, we have <code>/dev/urandom</code> to test for outputs. For controlling the output size, I used both <code>head</code> and <code>dd</code> (for controlling output more precisely). Let’s write a code and test it. Note that Python 3 is used for this test. Both Linux and Windows with bash can be used for this test.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> subprocessblock_size <span class="token operator">=</span> <span class="token number">65536</span>proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"dd if=/dev/urandom bs=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>block_size<span class="token punctuation">&#125;</span></span><span class="token string"> count=1 2>/dev/null"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                        stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">)</span>proc<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>output <span class="token operator">=</span> proc<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>retcode <span class="token operator">=</span> proc<span class="token punctuation">.</span>returncode<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If we run this test, we can see <code>65536</code> printed as expected. However, let’s change <code>block_size</code> to 65537, or any value above that. Now we have a program that will never stop running! Now we can say that the buffer for <code>subprocess.PIPE</code> is exactly 65536. Therefore, we now know why the problem appears. The process is waiting for the buffer to clear up and only after it can stop running. Also, as long as the total amount of received bytes exceeds 65536, the program will hang, even if block size is so small and count is large, i.e., <code>dd if=/dev/urandom bs=1 count=65537 2&gt;/dev/null</code> will hang as well.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The solution is so easy that I am surprised. Just swapping two lines and the problem is solved:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> subprocessblock_size <span class="token operator">=</span> <span class="token number">65536</span>proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"dd if=/dev/urandom bs=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>block_size<span class="token punctuation">&#125;</span></span><span class="token string"> count=1 2>/dev/null"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>                        stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">)</span>output <span class="token operator">=</span> proc<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>proc<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># put it here!</span>retcode <span class="token operator">=</span> proc<span class="token punctuation">.</span>returncode<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Now, the program will first read all the bytes until the end, and then wait for the program to exit instead of waiting for someone to take away the output from the buffer! It’s a hard problem with an easy solution. I hope it will never happen again.</p><p>Testing is hard, but it’s even harder to test a testing framework!</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Programming </tag>
            
            <tag> Problems </tag>
            
            <tag> Thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/test/hello-world/"/>
      <url>/test/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h3><h4 id="Syntax-highlighting"><a href="#Syntax-highlighting" class="headerlink" title="Syntax highlighting"></a>Syntax highlighting</h4><pre class="line-numbers language-cs" data-language="cs"><code class="language-cs"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><input checked="" disabled="" type="checkbox"> Verdict pass</li></ul><h4 id="Latex"><a href="#Latex" class="headerlink" title="Latex"></a>Latex</h4><p>When $x = 2$, we have that<br>\[x+3 = 5.\]</p><ul><li><input checked="" disabled="" type="checkbox"> Verdict pass</li></ul><h4 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h4><table><thead><tr><th align="left">A</th><th align="center">B</th><th align="right">C</th></tr></thead><tbody><tr><td align="left">hi</td><td align="center">hi</td><td align="right">hi</td></tr></tbody></table><ul><li><input checked="" disabled="" type="checkbox"> Verdict pass</li></ul><h4 id="Videos"><a href="#Videos" class="headerlink" title="Videos"></a>Videos</h4><iframe src="//player.bilibili.com/player.html?aid=498036840&bvid=BV1mK41157UN&cid=186132733&page=1" width="100%" height="300" frameborder="0" loading="lazy" allowfullscreen></iframe><ul><li><input checked="" disabled="" type="checkbox"> Verdict pass</li></ul>]]></content>
      
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
